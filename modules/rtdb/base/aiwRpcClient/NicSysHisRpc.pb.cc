// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NicSysHisRpc.proto

#include "NicSysHisRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_NicSysHisRpc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReadInfo_NicSysHisRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysHisRpc_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CompressInfo_NicSysHisRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysHisRpc_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_psTagHisData_NicSysHisRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysHisRpc_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_psTagListHisData_NicSysHisRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysRpc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_psDataField_NicSysRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysRpc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_psTime_NicSysRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysRpc_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_psData_NicSysRpc_2eproto;
namespace NicSys_Hisd {
class QualityInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QualityInfo> _instance;
} _QualityInfo_default_instance_;
class ReadInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadInfo> _instance;
} _ReadInfo_default_instance_;
class CompressInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompressInfo> _instance;
} _CompressInfo_default_instance_;
class TagIDParaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TagIDPara> _instance;
} _TagIDPara_default_instance_;
class psHisParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psHisParameter> _instance;
} _psHisParameter_default_instance_;
class psTagHisDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psTagHisData> _instance;
} _psTagHisData_default_instance_;
class psTagListHisDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psTagListHisData> _instance;
} _psTagListHisData_default_instance_;
class psHisWriteParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psHisWriteParameter> _instance;
} _psHisWriteParameter_default_instance_;
class psHisRPCReturnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psHisRPCReturn> _instance;
} _psHisRPCReturn_default_instance_;
class psHisQueryParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psHisQueryParameter> _instance;
} _psHisQueryParameter_default_instance_;
}  // namespace NicSys_Hisd
static void InitDefaultsQualityInfo_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_QualityInfo_default_instance_;
    new (ptr) ::NicSys_Hisd::QualityInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::QualityInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QualityInfo_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQualityInfo_NicSysHisRpc_2eproto}, {}};

static void InitDefaultsReadInfo_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_ReadInfo_default_instance_;
    new (ptr) ::NicSys_Hisd::ReadInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::ReadInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadInfo_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadInfo_NicSysHisRpc_2eproto}, {}};

static void InitDefaultsCompressInfo_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_CompressInfo_default_instance_;
    new (ptr) ::NicSys_Hisd::CompressInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::CompressInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CompressInfo_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCompressInfo_NicSysHisRpc_2eproto}, {
      &scc_info_psData_NicSysRpc_2eproto.base,}};

static void InitDefaultsTagIDPara_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_TagIDPara_default_instance_;
    new (ptr) ::NicSys_Hisd::TagIDPara();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::TagIDPara::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TagIDPara_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTagIDPara_NicSysHisRpc_2eproto}, {
      &scc_info_CompressInfo_NicSysHisRpc_2eproto.base,
      &scc_info_ReadInfo_NicSysHisRpc_2eproto.base,}};

static void InitDefaultspsHisParameter_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psHisParameter_default_instance_;
    new (ptr) ::NicSys_Hisd::psHisParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psHisParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_psHisParameter_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspsHisParameter_NicSysHisRpc_2eproto}, {
      &scc_info_psTime_NicSysRpc_2eproto.base,}};

static void InitDefaultspsTagHisData_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psTagHisData_default_instance_;
    new (ptr) ::NicSys_Hisd::psTagHisData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psTagHisData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_psTagHisData_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspsTagHisData_NicSysHisRpc_2eproto}, {
      &scc_info_psData_NicSysRpc_2eproto.base,}};

static void InitDefaultspsTagListHisData_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psTagListHisData_default_instance_;
    new (ptr) ::NicSys_Hisd::psTagListHisData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psTagListHisData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_psTagListHisData_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspsTagListHisData_NicSysHisRpc_2eproto}, {
      &scc_info_psTagHisData_NicSysHisRpc_2eproto.base,}};

static void InitDefaultspsHisWriteParameter_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psHisWriteParameter_default_instance_;
    new (ptr) ::NicSys_Hisd::psHisWriteParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psHisWriteParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_psHisWriteParameter_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultspsHisWriteParameter_NicSysHisRpc_2eproto}, {
      &scc_info_psDataField_NicSysRpc_2eproto.base,
      &scc_info_psTagHisData_NicSysHisRpc_2eproto.base,}};

static void InitDefaultspsHisRPCReturn_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psHisRPCReturn_default_instance_;
    new (ptr) ::NicSys_Hisd::psHisRPCReturn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psHisRPCReturn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_psHisRPCReturn_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspsHisRPCReturn_NicSysHisRpc_2eproto}, {}};

static void InitDefaultspsHisQueryParameter_NicSysHisRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psHisQueryParameter_default_instance_;
    new (ptr) ::NicSys_Hisd::psHisQueryParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psHisQueryParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_psHisQueryParameter_NicSysHisRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultspsHisQueryParameter_NicSysHisRpc_2eproto}, {
      &scc_info_psDataField_NicSysRpc_2eproto.base,
      &scc_info_psTagListHisData_NicSysHisRpc_2eproto.base,}};

void InitDefaults_NicSysHisRpc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_QualityInfo_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadInfo_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompressInfo_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TagIDPara_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psHisParameter_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psTagHisData_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psTagListHisData_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psHisWriteParameter_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psHisRPCReturn_NicSysHisRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psHisQueryParameter_NicSysHisRpc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_NicSysHisRpc_2eproto[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_NicSysHisRpc_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_NicSysHisRpc_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_NicSysHisRpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::QualityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::QualityInfo, q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::ReadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::ReadInfo, nfileid_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::ReadInfo, nindexpagenum_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::ReadInfo, nindexitem_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::ReadInfo, ndatapagenum_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::ReadInfo, nisinsertdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, ntagid_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, fcompressrate_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, ftopslope_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, fbottomslope_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, nmaxsavetime_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, npointcount_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, plastsave_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, plast_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, nfileid_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, nindexpagenum_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::CompressInfo, ndatapagenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::TagIDPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::TagIDPara, pcompress_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::TagIDPara, preadinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, ntagid_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, datatype_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, nmaxsavetime_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, fcompressrate_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, validtime_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, bissave_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, bisdeleted_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisParameter, compressmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagHisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagHisData, tagid_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagHisData, datacount_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagHisData, datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagListHisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagListHisData, tagcount_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTagListHisData, taglisthisdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisWriteParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisWriteParameter, fields_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisWriteParameter, ptaghisdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisRPCReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisRPCReturn, apistatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisQueryParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisQueryParameter, fields_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psHisQueryParameter, ptaghisdata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NicSys_Hisd::QualityInfo)},
  { 6, -1, sizeof(::NicSys_Hisd::ReadInfo)},
  { 16, -1, sizeof(::NicSys_Hisd::CompressInfo)},
  { 32, -1, sizeof(::NicSys_Hisd::TagIDPara)},
  { 39, -1, sizeof(::NicSys_Hisd::psHisParameter)},
  { 52, -1, sizeof(::NicSys_Hisd::psTagHisData)},
  { 60, -1, sizeof(::NicSys_Hisd::psTagListHisData)},
  { 67, -1, sizeof(::NicSys_Hisd::psHisWriteParameter)},
  { 74, -1, sizeof(::NicSys_Hisd::psHisRPCReturn)},
  { 80, -1, sizeof(::NicSys_Hisd::psHisQueryParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_QualityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_ReadInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_CompressInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_TagIDPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psHisParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psTagHisData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psTagListHisData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psHisWriteParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psHisRPCReturn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psHisQueryParameter_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_NicSysHisRpc_2eproto = {
  {}, AddDescriptors_NicSysHisRpc_2eproto, "NicSysHisRpc.proto", schemas,
  file_default_instances, TableStruct_NicSysHisRpc_2eproto::offsets,
  file_level_metadata_NicSysHisRpc_2eproto, 10, file_level_enum_descriptors_NicSysHisRpc_2eproto, file_level_service_descriptors_NicSysHisRpc_2eproto,
};

const char descriptor_table_protodef_NicSysHisRpc_2eproto[] =
  "\n\022NicSysHisRpc.proto\022\013NicSys_Hisd\032\017NicSy"
  "sRpc.proto\"\030\n\013QualityInfo\022\t\n\001q\030\001 \001(\005\"s\n\010"
  "ReadInfo\022\017\n\007nFileID\030\001 \001(\005\022\025\n\rnIndexPageN"
  "um\030\002 \001(\005\022\022\n\nnIndexItem\030\003 \001(\005\022\024\n\014nDataPag"
  "eNum\030\004 \001(\005\022\025\n\rnIsInsertData\030\005 \001(\005\"\223\002\n\014Co"
  "mpressInfo\022\016\n\006nTagID\030\001 \001(\005\022\025\n\rfCompressR"
  "ate\030\002 \001(\001\022\021\n\tfTopSlope\030\003 \001(\001\022\024\n\014fBottomS"
  "lope\030\004 \001(\001\022\024\n\014nMaxSaveTime\030\005 \001(\005\022\023\n\013nPoi"
  "ntCount\030\006 \001(\005\022&\n\tpLastSave\030\007 \001(\0132\023.NicSy"
  "s_Hisd.psData\022\"\n\005pLast\030\010 \001(\0132\023.NicSys_Hi"
  "sd.psData\022\017\n\007nFileID\030\t \001(\005\022\025\n\rnIndexPage"
  "Num\030\n \001(\005\022\024\n\014nDataPageNum\030\013 \001(\005\"c\n\tTagID"
  "Para\022,\n\tpCompress\030\001 \001(\0132\031.NicSys_Hisd.Co"
  "mpressInfo\022(\n\tpReadInfo\030\002 \001(\0132\025.NicSys_H"
  "isd.ReadInfo\"\375\001\n\016psHisParameter\022\016\n\006nTagI"
  "D\030\001 \001(\005\022-\n\010DataType\030\002 \001(\0162\033.NicSys_Hisd."
  "psDataTypeEnum\022\024\n\014nMaxSaveTime\030\003 \001(\005\022\025\n\r"
  "fCompressRate\030\004 \001(\001\022&\n\tValidTime\030\005 \001(\0132\023"
  ".NicSys_Hisd.psTime\022\017\n\007bIsSave\030\006 \001(\010\022\022\n\n"
  "bIsDeleted\030\007 \001(\010\0222\n\014CompressMode\030\010 \001(\0162\034"
  ".NicSys_Hisd.HisCompressMode\"W\n\014psTagHis"
  "Data\022\r\n\005TagId\030\001 \001(\005\022\021\n\tDataCount\030\002 \001(\005\022%"
  "\n\010DataList\030\003 \003(\0132\023.NicSys_Hisd.psData\"W\n"
  "\020psTagListHisData\022\020\n\010TagCount\030\001 \001(\005\0221\n\016T"
  "agListHisData\030\002 \003(\0132\031.NicSys_Hisd.psTagH"
  "isData\"o\n\023psHisWriteParameter\022(\n\006Fields\030"
  "\001 \001(\0132\030.NicSys_Hisd.psDataField\022.\n\013pTagH"
  "isData\030\002 \003(\0132\031.NicSys_Hisd.psTagHisData\""
  "#\n\016psHisRPCReturn\022\021\n\tapiStatus\030\001 \001(\021\"s\n\023"
  "psHisQueryParameter\022(\n\006Fields\030\001 \001(\0132\030.Ni"
  "cSys_Hisd.psDataField\0222\n\013pTagHisData\030\002 \003"
  "(\0132\035.NicSys_Hisd.psTagListHisData*\202\001\n\017Hi"
  "sCompressMode\022\026\n\022Compress_Undefined\020\000\022\027\n"
  "\023Compress_NoCompress\020\001\022\023\n\017Compress_chang"
  "e\020\002\022\025\n\021Compress_DeadBand\020\003\022\022\n\016Compress_S"
  "wing\020\0042\245\001\n\013HisdService\022J\n\tHis_Write\022 .Ni"
  "cSys_Hisd.psHisWriteParameter\032\033.NicSys_H"
  "isd.psHisRPCReturn\022J\n\tHis_Query\022 .NicSys"
  "_Hisd.psHisQueryParameter\032\033.NicSys_Hisd."
  "psHisRPCReturnb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_NicSysHisRpc_2eproto = {
  false, InitDefaults_NicSysHisRpc_2eproto, 
  descriptor_table_protodef_NicSysHisRpc_2eproto,
  "NicSysHisRpc.proto", &assign_descriptors_table_NicSysHisRpc_2eproto, 1582,
};

void AddDescriptors_NicSysHisRpc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_NicSysRpc_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_NicSysHisRpc_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NicSysHisRpc_2eproto = []() { AddDescriptors_NicSysHisRpc_2eproto(); return true; }();
namespace NicSys_Hisd {
const ::google::protobuf::EnumDescriptor* HisCompressMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_NicSysHisRpc_2eproto);
  return file_level_enum_descriptors_NicSysHisRpc_2eproto[0];
}
bool HisCompressMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void QualityInfo::InitAsDefaultInstance() {
}
class QualityInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QualityInfo::kQFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QualityInfo::QualityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.QualityInfo)
}
QualityInfo::QualityInfo(const QualityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  q_ = from.q_;
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.QualityInfo)
}

void QualityInfo::SharedCtor() {
  q_ = 0;
}

QualityInfo::~QualityInfo() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.QualityInfo)
  SharedDtor();
}

void QualityInfo::SharedDtor() {
}

void QualityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QualityInfo& QualityInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QualityInfo_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void QualityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.QualityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  q_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QualityInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QualityInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 q = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_q(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QualityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.QualityInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 q = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &q_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.QualityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.QualityInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QualityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.QualityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->q(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.QualityInfo)
}

::google::protobuf::uint8* QualityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.QualityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->q(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.QualityInfo)
  return target;
}

size_t QualityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.QualityInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 q = 1;
  if (this->q() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->q());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.QualityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QualityInfo* source =
      ::google::protobuf::DynamicCastToGenerated<QualityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.QualityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.QualityInfo)
    MergeFrom(*source);
  }
}

void QualityInfo::MergeFrom(const QualityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.QualityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.q() != 0) {
    set_q(from.q());
  }
}

void QualityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.QualityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityInfo::CopyFrom(const QualityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.QualityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityInfo::IsInitialized() const {
  return true;
}

void QualityInfo::Swap(QualityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QualityInfo::InternalSwap(QualityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(q_, other->q_);
}

::google::protobuf::Metadata QualityInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReadInfo::InitAsDefaultInstance() {
}
class ReadInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadInfo::kNFileIDFieldNumber;
const int ReadInfo::kNIndexPageNumFieldNumber;
const int ReadInfo::kNIndexItemFieldNumber;
const int ReadInfo::kNDataPageNumFieldNumber;
const int ReadInfo::kNIsInsertDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadInfo::ReadInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.ReadInfo)
}
ReadInfo::ReadInfo(const ReadInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nfileid_, &from.nfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nisinsertdata_) -
    reinterpret_cast<char*>(&nfileid_)) + sizeof(nisinsertdata_));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.ReadInfo)
}

void ReadInfo::SharedCtor() {
  ::memset(&nfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nisinsertdata_) -
      reinterpret_cast<char*>(&nfileid_)) + sizeof(nisinsertdata_));
}

ReadInfo::~ReadInfo() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.ReadInfo)
  SharedDtor();
}

void ReadInfo::SharedDtor() {
}

void ReadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadInfo& ReadInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReadInfo_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void ReadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.ReadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nfileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nisinsertdata_) -
      reinterpret_cast<char*>(&nfileid_)) + sizeof(nisinsertdata_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReadInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 nFileID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nfileid(value);
        break;
      }
      // int32 nIndexPageNum = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nindexpagenum(value);
        break;
      }
      // int32 nIndexItem = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nindexitem(value);
        break;
      }
      // int32 nDataPageNum = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_ndatapagenum(value);
        break;
      }
      // int32 nIsInsertData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nisinsertdata(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.ReadInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nFileID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nIndexPageNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nindexpagenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nIndexItem = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nindexitem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nDataPageNum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndatapagenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nIsInsertData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nisinsertdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.ReadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.ReadInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.ReadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nFileID = 1;
  if (this->nfileid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nfileid(), output);
  }

  // int32 nIndexPageNum = 2;
  if (this->nindexpagenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nindexpagenum(), output);
  }

  // int32 nIndexItem = 3;
  if (this->nindexitem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nindexitem(), output);
  }

  // int32 nDataPageNum = 4;
  if (this->ndatapagenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ndatapagenum(), output);
  }

  // int32 nIsInsertData = 5;
  if (this->nisinsertdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nisinsertdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.ReadInfo)
}

::google::protobuf::uint8* ReadInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.ReadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nFileID = 1;
  if (this->nfileid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nfileid(), target);
  }

  // int32 nIndexPageNum = 2;
  if (this->nindexpagenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nindexpagenum(), target);
  }

  // int32 nIndexItem = 3;
  if (this->nindexitem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nindexitem(), target);
  }

  // int32 nDataPageNum = 4;
  if (this->ndatapagenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ndatapagenum(), target);
  }

  // int32 nIsInsertData = 5;
  if (this->nisinsertdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nisinsertdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.ReadInfo)
  return target;
}

size_t ReadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.ReadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nFileID = 1;
  if (this->nfileid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nfileid());
  }

  // int32 nIndexPageNum = 2;
  if (this->nindexpagenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nindexpagenum());
  }

  // int32 nIndexItem = 3;
  if (this->nindexitem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nindexitem());
  }

  // int32 nDataPageNum = 4;
  if (this->ndatapagenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ndatapagenum());
  }

  // int32 nIsInsertData = 5;
  if (this->nisinsertdata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nisinsertdata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.ReadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ReadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.ReadInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.ReadInfo)
    MergeFrom(*source);
  }
}

void ReadInfo::MergeFrom(const ReadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.ReadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nfileid() != 0) {
    set_nfileid(from.nfileid());
  }
  if (from.nindexpagenum() != 0) {
    set_nindexpagenum(from.nindexpagenum());
  }
  if (from.nindexitem() != 0) {
    set_nindexitem(from.nindexitem());
  }
  if (from.ndatapagenum() != 0) {
    set_ndatapagenum(from.ndatapagenum());
  }
  if (from.nisinsertdata() != 0) {
    set_nisinsertdata(from.nisinsertdata());
  }
}

void ReadInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.ReadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadInfo::CopyFrom(const ReadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.ReadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadInfo::IsInitialized() const {
  return true;
}

void ReadInfo::Swap(ReadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadInfo::InternalSwap(ReadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nfileid_, other->nfileid_);
  swap(nindexpagenum_, other->nindexpagenum_);
  swap(nindexitem_, other->nindexitem_);
  swap(ndatapagenum_, other->ndatapagenum_);
  swap(nisinsertdata_, other->nisinsertdata_);
}

::google::protobuf::Metadata ReadInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CompressInfo::InitAsDefaultInstance() {
  ::NicSys_Hisd::_CompressInfo_default_instance_._instance.get_mutable()->plastsave_ = const_cast< ::NicSys_Hisd::psData*>(
      ::NicSys_Hisd::psData::internal_default_instance());
  ::NicSys_Hisd::_CompressInfo_default_instance_._instance.get_mutable()->plast_ = const_cast< ::NicSys_Hisd::psData*>(
      ::NicSys_Hisd::psData::internal_default_instance());
}
class CompressInfo::HasBitSetters {
 public:
  static const ::NicSys_Hisd::psData& plastsave(const CompressInfo* msg);
  static const ::NicSys_Hisd::psData& plast(const CompressInfo* msg);
};

const ::NicSys_Hisd::psData&
CompressInfo::HasBitSetters::plastsave(const CompressInfo* msg) {
  return *msg->plastsave_;
}
const ::NicSys_Hisd::psData&
CompressInfo::HasBitSetters::plast(const CompressInfo* msg) {
  return *msg->plast_;
}
void CompressInfo::clear_plastsave() {
  if (GetArenaNoVirtual() == nullptr && plastsave_ != nullptr) {
    delete plastsave_;
  }
  plastsave_ = nullptr;
}
void CompressInfo::clear_plast() {
  if (GetArenaNoVirtual() == nullptr && plast_ != nullptr) {
    delete plast_;
  }
  plast_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressInfo::kNTagIDFieldNumber;
const int CompressInfo::kFCompressRateFieldNumber;
const int CompressInfo::kFTopSlopeFieldNumber;
const int CompressInfo::kFBottomSlopeFieldNumber;
const int CompressInfo::kNMaxSaveTimeFieldNumber;
const int CompressInfo::kNPointCountFieldNumber;
const int CompressInfo::kPLastSaveFieldNumber;
const int CompressInfo::kPLastFieldNumber;
const int CompressInfo::kNFileIDFieldNumber;
const int CompressInfo::kNIndexPageNumFieldNumber;
const int CompressInfo::kNDataPageNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressInfo::CompressInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.CompressInfo)
}
CompressInfo::CompressInfo(const CompressInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plastsave()) {
    plastsave_ = new ::NicSys_Hisd::psData(*from.plastsave_);
  } else {
    plastsave_ = nullptr;
  }
  if (from.has_plast()) {
    plast_ = new ::NicSys_Hisd::psData(*from.plast_);
  } else {
    plast_ = nullptr;
  }
  ::memcpy(&fcompressrate_, &from.fcompressrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndatapagenum_) -
    reinterpret_cast<char*>(&fcompressrate_)) + sizeof(ndatapagenum_));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.CompressInfo)
}

void CompressInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CompressInfo_NicSysHisRpc_2eproto.base);
  ::memset(&plastsave_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndatapagenum_) -
      reinterpret_cast<char*>(&plastsave_)) + sizeof(ndatapagenum_));
}

CompressInfo::~CompressInfo() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.CompressInfo)
  SharedDtor();
}

void CompressInfo::SharedDtor() {
  if (this != internal_default_instance()) delete plastsave_;
  if (this != internal_default_instance()) delete plast_;
}

void CompressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressInfo& CompressInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CompressInfo_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void CompressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.CompressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && plastsave_ != nullptr) {
    delete plastsave_;
  }
  plastsave_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && plast_ != nullptr) {
    delete plast_;
  }
  plast_ = nullptr;
  ::memset(&fcompressrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndatapagenum_) -
      reinterpret_cast<char*>(&fcompressrate_)) + sizeof(ndatapagenum_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompressInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CompressInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 nTagID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_ntagid(value);
        break;
      }
      // double fCompressRate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_fcompressrate(val);
        break;
      }
      // double fTopSlope = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_ftopslope(val);
        break;
      }
      // double fBottomSlope = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_fbottomslope(val);
        break;
      }
      // int32 nMaxSaveTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nmaxsavetime(value);
        break;
      }
      // int32 nPointCount = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_npointcount(value);
        break;
      }
      // .NicSys_Hisd.psData pLastSave = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psData::_InternalParse;
        object = msg->mutable_plastsave();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // .NicSys_Hisd.psData pLast = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psData::_InternalParse;
        object = msg->mutable_plast();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // int32 nFileID = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nfileid(value);
        break;
      }
      // int32 nIndexPageNum = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nindexpagenum(value);
        break;
      }
      // int32 nDataPageNum = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_ndatapagenum(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.CompressInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nTagID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntagid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fCompressRate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fcompressrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fTopSlope = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ftopslope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fBottomSlope = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fbottomslope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nMaxSaveTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmaxsavetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nPointCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npointcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.psData pLastSave = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plastsave()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.psData pLast = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nFileID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nIndexPageNum = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nindexpagenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nDataPageNum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndatapagenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.CompressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.CompressInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.CompressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nTagID = 1;
  if (this->ntagid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntagid(), output);
  }

  // double fCompressRate = 2;
  if (this->fcompressrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fcompressrate(), output);
  }

  // double fTopSlope = 3;
  if (this->ftopslope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ftopslope(), output);
  }

  // double fBottomSlope = 4;
  if (this->fbottomslope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fbottomslope(), output);
  }

  // int32 nMaxSaveTime = 5;
  if (this->nmaxsavetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nmaxsavetime(), output);
  }

  // int32 nPointCount = 6;
  if (this->npointcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->npointcount(), output);
  }

  // .NicSys_Hisd.psData pLastSave = 7;
  if (this->has_plastsave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::plastsave(this), output);
  }

  // .NicSys_Hisd.psData pLast = 8;
  if (this->has_plast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::plast(this), output);
  }

  // int32 nFileID = 9;
  if (this->nfileid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nfileid(), output);
  }

  // int32 nIndexPageNum = 10;
  if (this->nindexpagenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nindexpagenum(), output);
  }

  // int32 nDataPageNum = 11;
  if (this->ndatapagenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ndatapagenum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.CompressInfo)
}

::google::protobuf::uint8* CompressInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.CompressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nTagID = 1;
  if (this->ntagid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntagid(), target);
  }

  // double fCompressRate = 2;
  if (this->fcompressrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fcompressrate(), target);
  }

  // double fTopSlope = 3;
  if (this->ftopslope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ftopslope(), target);
  }

  // double fBottomSlope = 4;
  if (this->fbottomslope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fbottomslope(), target);
  }

  // int32 nMaxSaveTime = 5;
  if (this->nmaxsavetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nmaxsavetime(), target);
  }

  // int32 nPointCount = 6;
  if (this->npointcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->npointcount(), target);
  }

  // .NicSys_Hisd.psData pLastSave = 7;
  if (this->has_plastsave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::plastsave(this), deterministic, target);
  }

  // .NicSys_Hisd.psData pLast = 8;
  if (this->has_plast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::plast(this), deterministic, target);
  }

  // int32 nFileID = 9;
  if (this->nfileid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nfileid(), target);
  }

  // int32 nIndexPageNum = 10;
  if (this->nindexpagenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nindexpagenum(), target);
  }

  // int32 nDataPageNum = 11;
  if (this->ndatapagenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ndatapagenum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.CompressInfo)
  return target;
}

size_t CompressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.CompressInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NicSys_Hisd.psData pLastSave = 7;
  if (this->has_plastsave()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plastsave_);
  }

  // .NicSys_Hisd.psData pLast = 8;
  if (this->has_plast()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plast_);
  }

  // double fCompressRate = 2;
  if (this->fcompressrate() != 0) {
    total_size += 1 + 8;
  }

  // double fTopSlope = 3;
  if (this->ftopslope() != 0) {
    total_size += 1 + 8;
  }

  // int32 nTagID = 1;
  if (this->ntagid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntagid());
  }

  // int32 nMaxSaveTime = 5;
  if (this->nmaxsavetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nmaxsavetime());
  }

  // double fBottomSlope = 4;
  if (this->fbottomslope() != 0) {
    total_size += 1 + 8;
  }

  // int32 nPointCount = 6;
  if (this->npointcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npointcount());
  }

  // int32 nFileID = 9;
  if (this->nfileid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nfileid());
  }

  // int32 nIndexPageNum = 10;
  if (this->nindexpagenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nindexpagenum());
  }

  // int32 nDataPageNum = 11;
  if (this->ndatapagenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ndatapagenum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.CompressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CompressInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.CompressInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.CompressInfo)
    MergeFrom(*source);
  }
}

void CompressInfo::MergeFrom(const CompressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.CompressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_plastsave()) {
    mutable_plastsave()->::NicSys_Hisd::psData::MergeFrom(from.plastsave());
  }
  if (from.has_plast()) {
    mutable_plast()->::NicSys_Hisd::psData::MergeFrom(from.plast());
  }
  if (from.fcompressrate() != 0) {
    set_fcompressrate(from.fcompressrate());
  }
  if (from.ftopslope() != 0) {
    set_ftopslope(from.ftopslope());
  }
  if (from.ntagid() != 0) {
    set_ntagid(from.ntagid());
  }
  if (from.nmaxsavetime() != 0) {
    set_nmaxsavetime(from.nmaxsavetime());
  }
  if (from.fbottomslope() != 0) {
    set_fbottomslope(from.fbottomslope());
  }
  if (from.npointcount() != 0) {
    set_npointcount(from.npointcount());
  }
  if (from.nfileid() != 0) {
    set_nfileid(from.nfileid());
  }
  if (from.nindexpagenum() != 0) {
    set_nindexpagenum(from.nindexpagenum());
  }
  if (from.ndatapagenum() != 0) {
    set_ndatapagenum(from.ndatapagenum());
  }
}

void CompressInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.CompressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressInfo::CopyFrom(const CompressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.CompressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressInfo::IsInitialized() const {
  return true;
}

void CompressInfo::Swap(CompressInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressInfo::InternalSwap(CompressInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(plastsave_, other->plastsave_);
  swap(plast_, other->plast_);
  swap(fcompressrate_, other->fcompressrate_);
  swap(ftopslope_, other->ftopslope_);
  swap(ntagid_, other->ntagid_);
  swap(nmaxsavetime_, other->nmaxsavetime_);
  swap(fbottomslope_, other->fbottomslope_);
  swap(npointcount_, other->npointcount_);
  swap(nfileid_, other->nfileid_);
  swap(nindexpagenum_, other->nindexpagenum_);
  swap(ndatapagenum_, other->ndatapagenum_);
}

::google::protobuf::Metadata CompressInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TagIDPara::InitAsDefaultInstance() {
  ::NicSys_Hisd::_TagIDPara_default_instance_._instance.get_mutable()->pcompress_ = const_cast< ::NicSys_Hisd::CompressInfo*>(
      ::NicSys_Hisd::CompressInfo::internal_default_instance());
  ::NicSys_Hisd::_TagIDPara_default_instance_._instance.get_mutable()->preadinfo_ = const_cast< ::NicSys_Hisd::ReadInfo*>(
      ::NicSys_Hisd::ReadInfo::internal_default_instance());
}
class TagIDPara::HasBitSetters {
 public:
  static const ::NicSys_Hisd::CompressInfo& pcompress(const TagIDPara* msg);
  static const ::NicSys_Hisd::ReadInfo& preadinfo(const TagIDPara* msg);
};

const ::NicSys_Hisd::CompressInfo&
TagIDPara::HasBitSetters::pcompress(const TagIDPara* msg) {
  return *msg->pcompress_;
}
const ::NicSys_Hisd::ReadInfo&
TagIDPara::HasBitSetters::preadinfo(const TagIDPara* msg) {
  return *msg->preadinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagIDPara::kPCompressFieldNumber;
const int TagIDPara::kPReadInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagIDPara::TagIDPara()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.TagIDPara)
}
TagIDPara::TagIDPara(const TagIDPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pcompress()) {
    pcompress_ = new ::NicSys_Hisd::CompressInfo(*from.pcompress_);
  } else {
    pcompress_ = nullptr;
  }
  if (from.has_preadinfo()) {
    preadinfo_ = new ::NicSys_Hisd::ReadInfo(*from.preadinfo_);
  } else {
    preadinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.TagIDPara)
}

void TagIDPara::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TagIDPara_NicSysHisRpc_2eproto.base);
  ::memset(&pcompress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preadinfo_) -
      reinterpret_cast<char*>(&pcompress_)) + sizeof(preadinfo_));
}

TagIDPara::~TagIDPara() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.TagIDPara)
  SharedDtor();
}

void TagIDPara::SharedDtor() {
  if (this != internal_default_instance()) delete pcompress_;
  if (this != internal_default_instance()) delete preadinfo_;
}

void TagIDPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagIDPara& TagIDPara::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TagIDPara_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void TagIDPara::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.TagIDPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pcompress_ != nullptr) {
    delete pcompress_;
  }
  pcompress_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && preadinfo_ != nullptr) {
    delete preadinfo_;
  }
  preadinfo_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TagIDPara::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TagIDPara*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .NicSys_Hisd.CompressInfo pCompress = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::CompressInfo::_InternalParse;
        object = msg->mutable_pcompress();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // .NicSys_Hisd.ReadInfo pReadInfo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::ReadInfo::_InternalParse;
        object = msg->mutable_preadinfo();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TagIDPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.TagIDPara)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NicSys_Hisd.CompressInfo pCompress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pcompress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.ReadInfo pReadInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preadinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.TagIDPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.TagIDPara)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TagIDPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.TagIDPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.CompressInfo pCompress = 1;
  if (this->has_pcompress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pcompress(this), output);
  }

  // .NicSys_Hisd.ReadInfo pReadInfo = 2;
  if (this->has_preadinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::preadinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.TagIDPara)
}

::google::protobuf::uint8* TagIDPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.TagIDPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.CompressInfo pCompress = 1;
  if (this->has_pcompress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pcompress(this), deterministic, target);
  }

  // .NicSys_Hisd.ReadInfo pReadInfo = 2;
  if (this->has_preadinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::preadinfo(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.TagIDPara)
  return target;
}

size_t TagIDPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.TagIDPara)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NicSys_Hisd.CompressInfo pCompress = 1;
  if (this->has_pcompress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pcompress_);
  }

  // .NicSys_Hisd.ReadInfo pReadInfo = 2;
  if (this->has_preadinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preadinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagIDPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.TagIDPara)
  GOOGLE_DCHECK_NE(&from, this);
  const TagIDPara* source =
      ::google::protobuf::DynamicCastToGenerated<TagIDPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.TagIDPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.TagIDPara)
    MergeFrom(*source);
  }
}

void TagIDPara::MergeFrom(const TagIDPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.TagIDPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pcompress()) {
    mutable_pcompress()->::NicSys_Hisd::CompressInfo::MergeFrom(from.pcompress());
  }
  if (from.has_preadinfo()) {
    mutable_preadinfo()->::NicSys_Hisd::ReadInfo::MergeFrom(from.preadinfo());
  }
}

void TagIDPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.TagIDPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagIDPara::CopyFrom(const TagIDPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.TagIDPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagIDPara::IsInitialized() const {
  return true;
}

void TagIDPara::Swap(TagIDPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagIDPara::InternalSwap(TagIDPara* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pcompress_, other->pcompress_);
  swap(preadinfo_, other->preadinfo_);
}

::google::protobuf::Metadata TagIDPara::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psHisParameter::InitAsDefaultInstance() {
  ::NicSys_Hisd::_psHisParameter_default_instance_._instance.get_mutable()->validtime_ = const_cast< ::NicSys_Hisd::psTime*>(
      ::NicSys_Hisd::psTime::internal_default_instance());
}
class psHisParameter::HasBitSetters {
 public:
  static const ::NicSys_Hisd::psTime& validtime(const psHisParameter* msg);
};

const ::NicSys_Hisd::psTime&
psHisParameter::HasBitSetters::validtime(const psHisParameter* msg) {
  return *msg->validtime_;
}
void psHisParameter::clear_validtime() {
  if (GetArenaNoVirtual() == nullptr && validtime_ != nullptr) {
    delete validtime_;
  }
  validtime_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psHisParameter::kNTagIDFieldNumber;
const int psHisParameter::kDataTypeFieldNumber;
const int psHisParameter::kNMaxSaveTimeFieldNumber;
const int psHisParameter::kFCompressRateFieldNumber;
const int psHisParameter::kValidTimeFieldNumber;
const int psHisParameter::kBIsSaveFieldNumber;
const int psHisParameter::kBIsDeletedFieldNumber;
const int psHisParameter::kCompressModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psHisParameter::psHisParameter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psHisParameter)
}
psHisParameter::psHisParameter(const psHisParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_validtime()) {
    validtime_ = new ::NicSys_Hisd::psTime(*from.validtime_);
  } else {
    validtime_ = nullptr;
  }
  ::memcpy(&ntagid_, &from.ntagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressmode_) -
    reinterpret_cast<char*>(&ntagid_)) + sizeof(compressmode_));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psHisParameter)
}

void psHisParameter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psHisParameter_NicSysHisRpc_2eproto.base);
  ::memset(&validtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressmode_) -
      reinterpret_cast<char*>(&validtime_)) + sizeof(compressmode_));
}

psHisParameter::~psHisParameter() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psHisParameter)
  SharedDtor();
}

void psHisParameter::SharedDtor() {
  if (this != internal_default_instance()) delete validtime_;
}

void psHisParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psHisParameter& psHisParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psHisParameter_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void psHisParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psHisParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && validtime_ != nullptr) {
    delete validtime_;
  }
  validtime_ = nullptr;
  ::memset(&ntagid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressmode_) -
      reinterpret_cast<char*>(&ntagid_)) + sizeof(compressmode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psHisParameter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psHisParameter*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 nTagID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_ntagid(value);
        break;
      }
      // .NicSys_Hisd.psDataTypeEnum DataType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::NicSys_Hisd::psDataTypeEnum value = static_cast<::NicSys_Hisd::psDataTypeEnum>(val);
        msg->set_datatype(value);
        break;
      }
      // int32 nMaxSaveTime = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nmaxsavetime(value);
        break;
      }
      // double fCompressRate = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_fcompressrate(val);
        break;
      }
      // .NicSys_Hisd.psTime ValidTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psTime::_InternalParse;
        object = msg->mutable_validtime();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // bool bIsSave = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_bissave(value);
        break;
      }
      // bool bIsDeleted = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_bisdeleted(value);
        break;
      }
      // .NicSys_Hisd.HisCompressMode CompressMode = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::NicSys_Hisd::HisCompressMode value = static_cast<::NicSys_Hisd::HisCompressMode>(val);
        msg->set_compressmode(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psHisParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psHisParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nTagID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntagid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.psDataTypeEnum DataType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::NicSys_Hisd::psDataTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nMaxSaveTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmaxsavetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fCompressRate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fcompressrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.psTime ValidTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bIsSave = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bIsDeleted = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdeleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.HisCompressMode CompressMode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compressmode(static_cast< ::NicSys_Hisd::HisCompressMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psHisParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psHisParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psHisParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psHisParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nTagID = 1;
  if (this->ntagid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntagid(), output);
  }

  // .NicSys_Hisd.psDataTypeEnum DataType = 2;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->datatype(), output);
  }

  // int32 nMaxSaveTime = 3;
  if (this->nmaxsavetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nmaxsavetime(), output);
  }

  // double fCompressRate = 4;
  if (this->fcompressrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fcompressrate(), output);
  }

  // .NicSys_Hisd.psTime ValidTime = 5;
  if (this->has_validtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::validtime(this), output);
  }

  // bool bIsSave = 6;
  if (this->bissave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bissave(), output);
  }

  // bool bIsDeleted = 7;
  if (this->bisdeleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisdeleted(), output);
  }

  // .NicSys_Hisd.HisCompressMode CompressMode = 8;
  if (this->compressmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->compressmode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psHisParameter)
}

::google::protobuf::uint8* psHisParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psHisParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nTagID = 1;
  if (this->ntagid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntagid(), target);
  }

  // .NicSys_Hisd.psDataTypeEnum DataType = 2;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->datatype(), target);
  }

  // int32 nMaxSaveTime = 3;
  if (this->nmaxsavetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nmaxsavetime(), target);
  }

  // double fCompressRate = 4;
  if (this->fcompressrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fcompressrate(), target);
  }

  // .NicSys_Hisd.psTime ValidTime = 5;
  if (this->has_validtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::validtime(this), deterministic, target);
  }

  // bool bIsSave = 6;
  if (this->bissave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bissave(), target);
  }

  // bool bIsDeleted = 7;
  if (this->bisdeleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisdeleted(), target);
  }

  // .NicSys_Hisd.HisCompressMode CompressMode = 8;
  if (this->compressmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->compressmode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psHisParameter)
  return target;
}

size_t psHisParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psHisParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NicSys_Hisd.psTime ValidTime = 5;
  if (this->has_validtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *validtime_);
  }

  // int32 nTagID = 1;
  if (this->ntagid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntagid());
  }

  // .NicSys_Hisd.psDataTypeEnum DataType = 2;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  // double fCompressRate = 4;
  if (this->fcompressrate() != 0) {
    total_size += 1 + 8;
  }

  // int32 nMaxSaveTime = 3;
  if (this->nmaxsavetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nmaxsavetime());
  }

  // bool bIsSave = 6;
  if (this->bissave() != 0) {
    total_size += 1 + 1;
  }

  // bool bIsDeleted = 7;
  if (this->bisdeleted() != 0) {
    total_size += 1 + 1;
  }

  // .NicSys_Hisd.HisCompressMode CompressMode = 8;
  if (this->compressmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compressmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psHisParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psHisParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const psHisParameter* source =
      ::google::protobuf::DynamicCastToGenerated<psHisParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psHisParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psHisParameter)
    MergeFrom(*source);
  }
}

void psHisParameter::MergeFrom(const psHisParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psHisParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validtime()) {
    mutable_validtime()->::NicSys_Hisd::psTime::MergeFrom(from.validtime());
  }
  if (from.ntagid() != 0) {
    set_ntagid(from.ntagid());
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
  if (from.fcompressrate() != 0) {
    set_fcompressrate(from.fcompressrate());
  }
  if (from.nmaxsavetime() != 0) {
    set_nmaxsavetime(from.nmaxsavetime());
  }
  if (from.bissave() != 0) {
    set_bissave(from.bissave());
  }
  if (from.bisdeleted() != 0) {
    set_bisdeleted(from.bisdeleted());
  }
  if (from.compressmode() != 0) {
    set_compressmode(from.compressmode());
  }
}

void psHisParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psHisParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psHisParameter::CopyFrom(const psHisParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psHisParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psHisParameter::IsInitialized() const {
  return true;
}

void psHisParameter::Swap(psHisParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psHisParameter::InternalSwap(psHisParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(validtime_, other->validtime_);
  swap(ntagid_, other->ntagid_);
  swap(datatype_, other->datatype_);
  swap(fcompressrate_, other->fcompressrate_);
  swap(nmaxsavetime_, other->nmaxsavetime_);
  swap(bissave_, other->bissave_);
  swap(bisdeleted_, other->bisdeleted_);
  swap(compressmode_, other->compressmode_);
}

::google::protobuf::Metadata psHisParameter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psTagHisData::InitAsDefaultInstance() {
}
class psTagHisData::HasBitSetters {
 public:
};

void psTagHisData::clear_datalist() {
  datalist_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psTagHisData::kTagIdFieldNumber;
const int psTagHisData::kDataCountFieldNumber;
const int psTagHisData::kDataListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psTagHisData::psTagHisData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psTagHisData)
}
psTagHisData::psTagHisData(const psTagHisData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tagid_, &from.tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datacount_) -
    reinterpret_cast<char*>(&tagid_)) + sizeof(datacount_));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psTagHisData)
}

void psTagHisData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psTagHisData_NicSysHisRpc_2eproto.base);
  ::memset(&tagid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datacount_) -
      reinterpret_cast<char*>(&tagid_)) + sizeof(datacount_));
}

psTagHisData::~psTagHisData() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psTagHisData)
  SharedDtor();
}

void psTagHisData::SharedDtor() {
}

void psTagHisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psTagHisData& psTagHisData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psTagHisData_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void psTagHisData::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psTagHisData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  ::memset(&tagid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datacount_) -
      reinterpret_cast<char*>(&tagid_)) + sizeof(datacount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psTagHisData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psTagHisData*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 TagId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_tagid(value);
        break;
      }
      // int32 DataCount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_datacount(value);
        break;
      }
      // repeated .NicSys_Hisd.psData DataList = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::NicSys_Hisd::psData::_InternalParse;
          object = msg->add_datalist();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psTagHisData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psTagHisData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 TagId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tagid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DataCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datacount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NicSys_Hisd.psData DataList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psTagHisData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psTagHisData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psTagHisData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psTagHisData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TagId = 1;
  if (this->tagid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tagid(), output);
  }

  // int32 DataCount = 2;
  if (this->datacount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datacount(), output);
  }

  // repeated .NicSys_Hisd.psData DataList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datalist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->datalist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psTagHisData)
}

::google::protobuf::uint8* psTagHisData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psTagHisData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TagId = 1;
  if (this->tagid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tagid(), target);
  }

  // int32 DataCount = 2;
  if (this->datacount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datacount(), target);
  }

  // repeated .NicSys_Hisd.psData DataList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datalist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->datalist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psTagHisData)
  return target;
}

size_t psTagHisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psTagHisData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NicSys_Hisd.psData DataList = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->datalist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->datalist(static_cast<int>(i)));
    }
  }

  // int32 TagId = 1;
  if (this->tagid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tagid());
  }

  // int32 DataCount = 2;
  if (this->datacount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datacount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psTagHisData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psTagHisData)
  GOOGLE_DCHECK_NE(&from, this);
  const psTagHisData* source =
      ::google::protobuf::DynamicCastToGenerated<psTagHisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psTagHisData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psTagHisData)
    MergeFrom(*source);
  }
}

void psTagHisData::MergeFrom(const psTagHisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psTagHisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
  if (from.tagid() != 0) {
    set_tagid(from.tagid());
  }
  if (from.datacount() != 0) {
    set_datacount(from.datacount());
  }
}

void psTagHisData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psTagHisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psTagHisData::CopyFrom(const psTagHisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psTagHisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psTagHisData::IsInitialized() const {
  return true;
}

void psTagHisData::Swap(psTagHisData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psTagHisData::InternalSwap(psTagHisData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&datalist_)->InternalSwap(CastToBase(&other->datalist_));
  swap(tagid_, other->tagid_);
  swap(datacount_, other->datacount_);
}

::google::protobuf::Metadata psTagHisData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psTagListHisData::InitAsDefaultInstance() {
}
class psTagListHisData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psTagListHisData::kTagCountFieldNumber;
const int psTagListHisData::kTagListHisDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psTagListHisData::psTagListHisData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psTagListHisData)
}
psTagListHisData::psTagListHisData(const psTagListHisData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      taglisthisdata_(from.taglisthisdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagcount_ = from.tagcount_;
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psTagListHisData)
}

void psTagListHisData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psTagListHisData_NicSysHisRpc_2eproto.base);
  tagcount_ = 0;
}

psTagListHisData::~psTagListHisData() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psTagListHisData)
  SharedDtor();
}

void psTagListHisData::SharedDtor() {
}

void psTagListHisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psTagListHisData& psTagListHisData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psTagListHisData_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void psTagListHisData::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psTagListHisData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taglisthisdata_.Clear();
  tagcount_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psTagListHisData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psTagListHisData*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 TagCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_tagcount(value);
        break;
      }
      // repeated .NicSys_Hisd.psTagHisData TagListHisData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::NicSys_Hisd::psTagHisData::_InternalParse;
          object = msg->add_taglisthisdata();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psTagListHisData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psTagListHisData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 TagCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tagcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NicSys_Hisd.psTagHisData TagListHisData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_taglisthisdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psTagListHisData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psTagListHisData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psTagListHisData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psTagListHisData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TagCount = 1;
  if (this->tagcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tagcount(), output);
  }

  // repeated .NicSys_Hisd.psTagHisData TagListHisData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->taglisthisdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->taglisthisdata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psTagListHisData)
}

::google::protobuf::uint8* psTagListHisData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psTagListHisData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TagCount = 1;
  if (this->tagcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tagcount(), target);
  }

  // repeated .NicSys_Hisd.psTagHisData TagListHisData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->taglisthisdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->taglisthisdata(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psTagListHisData)
  return target;
}

size_t psTagListHisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psTagListHisData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NicSys_Hisd.psTagHisData TagListHisData = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->taglisthisdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->taglisthisdata(static_cast<int>(i)));
    }
  }

  // int32 TagCount = 1;
  if (this->tagcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tagcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psTagListHisData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psTagListHisData)
  GOOGLE_DCHECK_NE(&from, this);
  const psTagListHisData* source =
      ::google::protobuf::DynamicCastToGenerated<psTagListHisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psTagListHisData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psTagListHisData)
    MergeFrom(*source);
  }
}

void psTagListHisData::MergeFrom(const psTagListHisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psTagListHisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taglisthisdata_.MergeFrom(from.taglisthisdata_);
  if (from.tagcount() != 0) {
    set_tagcount(from.tagcount());
  }
}

void psTagListHisData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psTagListHisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psTagListHisData::CopyFrom(const psTagListHisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psTagListHisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psTagListHisData::IsInitialized() const {
  return true;
}

void psTagListHisData::Swap(psTagListHisData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psTagListHisData::InternalSwap(psTagListHisData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&taglisthisdata_)->InternalSwap(CastToBase(&other->taglisthisdata_));
  swap(tagcount_, other->tagcount_);
}

::google::protobuf::Metadata psTagListHisData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psHisWriteParameter::InitAsDefaultInstance() {
  ::NicSys_Hisd::_psHisWriteParameter_default_instance_._instance.get_mutable()->fields_ = const_cast< ::NicSys_Hisd::psDataField*>(
      ::NicSys_Hisd::psDataField::internal_default_instance());
}
class psHisWriteParameter::HasBitSetters {
 public:
  static const ::NicSys_Hisd::psDataField& fields(const psHisWriteParameter* msg);
};

const ::NicSys_Hisd::psDataField&
psHisWriteParameter::HasBitSetters::fields(const psHisWriteParameter* msg) {
  return *msg->fields_;
}
void psHisWriteParameter::clear_fields() {
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psHisWriteParameter::kFieldsFieldNumber;
const int psHisWriteParameter::kPTagHisDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psHisWriteParameter::psHisWriteParameter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psHisWriteParameter)
}
psHisWriteParameter::psHisWriteParameter(const psHisWriteParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ptaghisdata_(from.ptaghisdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fields()) {
    fields_ = new ::NicSys_Hisd::psDataField(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psHisWriteParameter)
}

void psHisWriteParameter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psHisWriteParameter_NicSysHisRpc_2eproto.base);
  fields_ = nullptr;
}

psHisWriteParameter::~psHisWriteParameter() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psHisWriteParameter)
  SharedDtor();
}

void psHisWriteParameter::SharedDtor() {
  if (this != internal_default_instance()) delete fields_;
}

void psHisWriteParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psHisWriteParameter& psHisWriteParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psHisWriteParameter_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void psHisWriteParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psHisWriteParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptaghisdata_.Clear();
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psHisWriteParameter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psHisWriteParameter*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .NicSys_Hisd.psDataField Fields = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psDataField::_InternalParse;
        object = msg->mutable_fields();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .NicSys_Hisd.psTagHisData pTagHisData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::NicSys_Hisd::psTagHisData::_InternalParse;
          object = msg->add_ptaghisdata();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psHisWriteParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psHisWriteParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NicSys_Hisd.psDataField Fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NicSys_Hisd.psTagHisData pTagHisData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ptaghisdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psHisWriteParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psHisWriteParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psHisWriteParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psHisWriteParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psDataField Fields = 1;
  if (this->has_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fields(this), output);
  }

  // repeated .NicSys_Hisd.psTagHisData pTagHisData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptaghisdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ptaghisdata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psHisWriteParameter)
}

::google::protobuf::uint8* psHisWriteParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psHisWriteParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psDataField Fields = 1;
  if (this->has_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fields(this), deterministic, target);
  }

  // repeated .NicSys_Hisd.psTagHisData pTagHisData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptaghisdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ptaghisdata(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psHisWriteParameter)
  return target;
}

size_t psHisWriteParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psHisWriteParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NicSys_Hisd.psTagHisData pTagHisData = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ptaghisdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ptaghisdata(static_cast<int>(i)));
    }
  }

  // .NicSys_Hisd.psDataField Fields = 1;
  if (this->has_fields()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fields_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psHisWriteParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psHisWriteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const psHisWriteParameter* source =
      ::google::protobuf::DynamicCastToGenerated<psHisWriteParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psHisWriteParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psHisWriteParameter)
    MergeFrom(*source);
  }
}

void psHisWriteParameter::MergeFrom(const psHisWriteParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psHisWriteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptaghisdata_.MergeFrom(from.ptaghisdata_);
  if (from.has_fields()) {
    mutable_fields()->::NicSys_Hisd::psDataField::MergeFrom(from.fields());
  }
}

void psHisWriteParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psHisWriteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psHisWriteParameter::CopyFrom(const psHisWriteParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psHisWriteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psHisWriteParameter::IsInitialized() const {
  return true;
}

void psHisWriteParameter::Swap(psHisWriteParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psHisWriteParameter::InternalSwap(psHisWriteParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ptaghisdata_)->InternalSwap(CastToBase(&other->ptaghisdata_));
  swap(fields_, other->fields_);
}

::google::protobuf::Metadata psHisWriteParameter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psHisRPCReturn::InitAsDefaultInstance() {
}
class psHisRPCReturn::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psHisRPCReturn::kApiStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psHisRPCReturn::psHisRPCReturn()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psHisRPCReturn)
}
psHisRPCReturn::psHisRPCReturn(const psHisRPCReturn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  apistatus_ = from.apistatus_;
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psHisRPCReturn)
}

void psHisRPCReturn::SharedCtor() {
  apistatus_ = 0;
}

psHisRPCReturn::~psHisRPCReturn() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psHisRPCReturn)
  SharedDtor();
}

void psHisRPCReturn::SharedDtor() {
}

void psHisRPCReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psHisRPCReturn& psHisRPCReturn::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psHisRPCReturn_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void psHisRPCReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psHisRPCReturn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apistatus_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psHisRPCReturn::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psHisRPCReturn*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // sint32 apiStatus = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = ::google::protobuf::internal::WireFormatLite::ZigZagDecode32(val);
        msg->set_apistatus(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psHisRPCReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psHisRPCReturn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 apiStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &apistatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psHisRPCReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psHisRPCReturn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psHisRPCReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psHisRPCReturn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 apiStatus = 1;
  if (this->apistatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->apistatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psHisRPCReturn)
}

::google::protobuf::uint8* psHisRPCReturn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psHisRPCReturn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 apiStatus = 1;
  if (this->apistatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->apistatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psHisRPCReturn)
  return target;
}

size_t psHisRPCReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psHisRPCReturn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 apiStatus = 1;
  if (this->apistatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->apistatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psHisRPCReturn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psHisRPCReturn)
  GOOGLE_DCHECK_NE(&from, this);
  const psHisRPCReturn* source =
      ::google::protobuf::DynamicCastToGenerated<psHisRPCReturn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psHisRPCReturn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psHisRPCReturn)
    MergeFrom(*source);
  }
}

void psHisRPCReturn::MergeFrom(const psHisRPCReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psHisRPCReturn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.apistatus() != 0) {
    set_apistatus(from.apistatus());
  }
}

void psHisRPCReturn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psHisRPCReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psHisRPCReturn::CopyFrom(const psHisRPCReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psHisRPCReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psHisRPCReturn::IsInitialized() const {
  return true;
}

void psHisRPCReturn::Swap(psHisRPCReturn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psHisRPCReturn::InternalSwap(psHisRPCReturn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(apistatus_, other->apistatus_);
}

::google::protobuf::Metadata psHisRPCReturn::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psHisQueryParameter::InitAsDefaultInstance() {
  ::NicSys_Hisd::_psHisQueryParameter_default_instance_._instance.get_mutable()->fields_ = const_cast< ::NicSys_Hisd::psDataField*>(
      ::NicSys_Hisd::psDataField::internal_default_instance());
}
class psHisQueryParameter::HasBitSetters {
 public:
  static const ::NicSys_Hisd::psDataField& fields(const psHisQueryParameter* msg);
};

const ::NicSys_Hisd::psDataField&
psHisQueryParameter::HasBitSetters::fields(const psHisQueryParameter* msg) {
  return *msg->fields_;
}
void psHisQueryParameter::clear_fields() {
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psHisQueryParameter::kFieldsFieldNumber;
const int psHisQueryParameter::kPTagHisDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psHisQueryParameter::psHisQueryParameter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psHisQueryParameter)
}
psHisQueryParameter::psHisQueryParameter(const psHisQueryParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ptaghisdata_(from.ptaghisdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fields()) {
    fields_ = new ::NicSys_Hisd::psDataField(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psHisQueryParameter)
}

void psHisQueryParameter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psHisQueryParameter_NicSysHisRpc_2eproto.base);
  fields_ = nullptr;
}

psHisQueryParameter::~psHisQueryParameter() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psHisQueryParameter)
  SharedDtor();
}

void psHisQueryParameter::SharedDtor() {
  if (this != internal_default_instance()) delete fields_;
}

void psHisQueryParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psHisQueryParameter& psHisQueryParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psHisQueryParameter_NicSysHisRpc_2eproto.base);
  return *internal_default_instance();
}


void psHisQueryParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psHisQueryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptaghisdata_.Clear();
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psHisQueryParameter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psHisQueryParameter*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .NicSys_Hisd.psDataField Fields = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psDataField::_InternalParse;
        object = msg->mutable_fields();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .NicSys_Hisd.psTagListHisData pTagHisData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::NicSys_Hisd::psTagListHisData::_InternalParse;
          object = msg->add_ptaghisdata();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psHisQueryParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psHisQueryParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NicSys_Hisd.psDataField Fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NicSys_Hisd.psTagListHisData pTagHisData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ptaghisdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psHisQueryParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psHisQueryParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psHisQueryParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psHisQueryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psDataField Fields = 1;
  if (this->has_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fields(this), output);
  }

  // repeated .NicSys_Hisd.psTagListHisData pTagHisData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptaghisdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ptaghisdata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psHisQueryParameter)
}

::google::protobuf::uint8* psHisQueryParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psHisQueryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psDataField Fields = 1;
  if (this->has_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fields(this), deterministic, target);
  }

  // repeated .NicSys_Hisd.psTagListHisData pTagHisData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptaghisdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ptaghisdata(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psHisQueryParameter)
  return target;
}

size_t psHisQueryParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psHisQueryParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NicSys_Hisd.psTagListHisData pTagHisData = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ptaghisdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ptaghisdata(static_cast<int>(i)));
    }
  }

  // .NicSys_Hisd.psDataField Fields = 1;
  if (this->has_fields()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fields_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psHisQueryParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psHisQueryParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const psHisQueryParameter* source =
      ::google::protobuf::DynamicCastToGenerated<psHisQueryParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psHisQueryParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psHisQueryParameter)
    MergeFrom(*source);
  }
}

void psHisQueryParameter::MergeFrom(const psHisQueryParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psHisQueryParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptaghisdata_.MergeFrom(from.ptaghisdata_);
  if (from.has_fields()) {
    mutable_fields()->::NicSys_Hisd::psDataField::MergeFrom(from.fields());
  }
}

void psHisQueryParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psHisQueryParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psHisQueryParameter::CopyFrom(const psHisQueryParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psHisQueryParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psHisQueryParameter::IsInitialized() const {
  return true;
}

void psHisQueryParameter::Swap(psHisQueryParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psHisQueryParameter::InternalSwap(psHisQueryParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ptaghisdata_)->InternalSwap(CastToBase(&other->ptaghisdata_));
  swap(fields_, other->fields_);
}

::google::protobuf::Metadata psHisQueryParameter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysHisRpc_2eproto);
  return ::file_level_metadata_NicSysHisRpc_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NicSys_Hisd
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::QualityInfo* Arena::CreateMaybeMessage< ::NicSys_Hisd::QualityInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::QualityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::ReadInfo* Arena::CreateMaybeMessage< ::NicSys_Hisd::ReadInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::ReadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::CompressInfo* Arena::CreateMaybeMessage< ::NicSys_Hisd::CompressInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::CompressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::TagIDPara* Arena::CreateMaybeMessage< ::NicSys_Hisd::TagIDPara >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::TagIDPara >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psHisParameter* Arena::CreateMaybeMessage< ::NicSys_Hisd::psHisParameter >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psHisParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psTagHisData* Arena::CreateMaybeMessage< ::NicSys_Hisd::psTagHisData >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psTagHisData >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psTagListHisData* Arena::CreateMaybeMessage< ::NicSys_Hisd::psTagListHisData >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psTagListHisData >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psHisWriteParameter* Arena::CreateMaybeMessage< ::NicSys_Hisd::psHisWriteParameter >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psHisWriteParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psHisRPCReturn* Arena::CreateMaybeMessage< ::NicSys_Hisd::psHisRPCReturn >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psHisRPCReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psHisQueryParameter* Arena::CreateMaybeMessage< ::NicSys_Hisd::psHisQueryParameter >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psHisQueryParameter >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
