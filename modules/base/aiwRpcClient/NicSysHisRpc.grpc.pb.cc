// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NicSysHisRpc.proto

#include "NicSysHisRpc.pb.h"
#include "NicSysHisRpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace NicSys_Hisd {

static const char* HisdService_method_names[] = {
  "/NicSys_Hisd.HisdService/His_Write",
  "/NicSys_Hisd.HisdService/His_Query",
};

std::unique_ptr< HisdService::Stub> HisdService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HisdService::Stub> stub(new HisdService::Stub(channel));
  return stub;
}

HisdService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_His_Write_(HisdService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_His_Query_(HisdService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HisdService::Stub::His_Write(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisWriteParameter& request, ::NicSys_Hisd::psHisRPCReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_His_Write_, context, request, response);
}

void HisdService::Stub::experimental_async::His_Write(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisWriteParameter* request, ::NicSys_Hisd::psHisRPCReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_His_Write_, context, request, response, std::move(f));
}

void HisdService::Stub::experimental_async::His_Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NicSys_Hisd::psHisRPCReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_His_Write_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NicSys_Hisd::psHisRPCReturn>* HisdService::Stub::AsyncHis_WriteRaw(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisWriteParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NicSys_Hisd::psHisRPCReturn>::Create(channel_.get(), cq, rpcmethod_His_Write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NicSys_Hisd::psHisRPCReturn>* HisdService::Stub::PrepareAsyncHis_WriteRaw(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisWriteParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NicSys_Hisd::psHisRPCReturn>::Create(channel_.get(), cq, rpcmethod_His_Write_, context, request, false);
}

::grpc::Status HisdService::Stub::His_Query(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisQueryParameter& request, ::NicSys_Hisd::psHisRPCReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_His_Query_, context, request, response);
}

void HisdService::Stub::experimental_async::His_Query(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisQueryParameter* request, ::NicSys_Hisd::psHisRPCReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_His_Query_, context, request, response, std::move(f));
}

void HisdService::Stub::experimental_async::His_Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NicSys_Hisd::psHisRPCReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_His_Query_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NicSys_Hisd::psHisRPCReturn>* HisdService::Stub::AsyncHis_QueryRaw(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisQueryParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NicSys_Hisd::psHisRPCReturn>::Create(channel_.get(), cq, rpcmethod_His_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NicSys_Hisd::psHisRPCReturn>* HisdService::Stub::PrepareAsyncHis_QueryRaw(::grpc::ClientContext* context, const ::NicSys_Hisd::psHisQueryParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NicSys_Hisd::psHisRPCReturn>::Create(channel_.get(), cq, rpcmethod_His_Query_, context, request, false);
}

HisdService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HisdService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HisdService::Service, ::NicSys_Hisd::psHisWriteParameter, ::NicSys_Hisd::psHisRPCReturn>(
          std::mem_fn(&HisdService::Service::His_Write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HisdService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HisdService::Service, ::NicSys_Hisd::psHisQueryParameter, ::NicSys_Hisd::psHisRPCReturn>(
          std::mem_fn(&HisdService::Service::His_Query), this)));
}

HisdService::Service::~Service() {
}

::grpc::Status HisdService::Service::His_Write(::grpc::ServerContext* context, const ::NicSys_Hisd::psHisWriteParameter* request, ::NicSys_Hisd::psHisRPCReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HisdService::Service::His_Query(::grpc::ServerContext* context, const ::NicSys_Hisd::psHisQueryParameter* request, ::NicSys_Hisd::psHisRPCReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace NicSys_Hisd

