// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NicSysRpc.proto

#include "NicSysRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_NicSysRpc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_psTime_NicSysRpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NicSysRpc_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_psVariant_NicSysRpc_2eproto;
namespace NicSys_Hisd {
class psTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psTime> _instance;
} _psTime_default_instance_;
class psVariantDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psVariant> _instance;
} _psVariant_default_instance_;
class psDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psData> _instance;
} _psData_default_instance_;
class psDataFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<psDataField> _instance;
} _psDataField_default_instance_;
}  // namespace NicSys_Hisd
static void InitDefaultspsTime_NicSysRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psTime_default_instance_;
    new (ptr) ::NicSys_Hisd::psTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_psTime_NicSysRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspsTime_NicSysRpc_2eproto}, {}};

static void InitDefaultspsVariant_NicSysRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psVariant_default_instance_;
    new (ptr) ::NicSys_Hisd::psVariant();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psVariant::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_psVariant_NicSysRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspsVariant_NicSysRpc_2eproto}, {
      &scc_info_psTime_NicSysRpc_2eproto.base,}};

static void InitDefaultspsData_NicSysRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psData_default_instance_;
    new (ptr) ::NicSys_Hisd::psData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_psData_NicSysRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultspsData_NicSysRpc_2eproto}, {
      &scc_info_psTime_NicSysRpc_2eproto.base,
      &scc_info_psVariant_NicSysRpc_2eproto.base,}};

static void InitDefaultspsDataField_NicSysRpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NicSys_Hisd::_psDataField_default_instance_;
    new (ptr) ::NicSys_Hisd::psDataField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NicSys_Hisd::psDataField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_psDataField_NicSysRpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspsDataField_NicSysRpc_2eproto}, {}};

void InitDefaults_NicSysRpc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_psTime_NicSysRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psVariant_NicSysRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psData_NicSysRpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_psDataField_NicSysRpc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_NicSysRpc_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_NicSysRpc_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_NicSysRpc_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_NicSysRpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTime, second_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psTime, millisec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, datatype_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, bool__),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, int8_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, uint8_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, int16_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, uint16_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, int32_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, uint32_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, int64_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, uint64_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, float__),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, double__),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psVariant, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psData, time_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psData, value_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psData, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psDataField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psDataField, time_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psDataField, value_),
  PROTOBUF_FIELD_OFFSET(::NicSys_Hisd::psDataField, quality_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NicSys_Hisd::psTime)},
  { 7, -1, sizeof(::NicSys_Hisd::psVariant)},
  { 25, -1, sizeof(::NicSys_Hisd::psData)},
  { 33, -1, sizeof(::NicSys_Hisd::psDataField)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psVariant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NicSys_Hisd::_psDataField_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_NicSysRpc_2eproto = {
  {}, AddDescriptors_NicSysRpc_2eproto, "NicSysRpc.proto", schemas,
  file_default_instances, TableStruct_NicSysRpc_2eproto::offsets,
  file_level_metadata_NicSysRpc_2eproto, 4, file_level_enum_descriptors_NicSysRpc_2eproto, file_level_service_descriptors_NicSysRpc_2eproto,
};

const char descriptor_table_protodef_NicSysRpc_2eproto[] =
  "\n\017NicSysRpc.proto\022\013NicSys_Hisd\"*\n\006psTime"
  "\022\016\n\006Second\030\001 \001(\005\022\020\n\010Millisec\030\002 \001(\005\"\204\002\n\tp"
  "sVariant\022-\n\010DataType\030\001 \001(\0162\033.NicSys_Hisd"
  ".psDataTypeEnum\022\014\n\004Bool\030\002 \001(\005\022\014\n\004Int8\030\003 "
  "\001(\021\022\r\n\005UInt8\030\004 \001(\005\022\r\n\005Int16\030\005 \001(\021\022\016\n\006UIn"
  "t16\030\006 \001(\005\022\r\n\005Int32\030\007 \001(\021\022\016\n\006UInt32\030\010 \001(\005"
  "\022\r\n\005Int64\030\t \001(\022\022\016\n\006UInt64\030\n \001(\003\022\r\n\005Float"
  "\030\013 \001(\002\022\016\n\006Double\030\014 \001(\001\022!\n\004Time\030\r \001(\0132\023.N"
  "icSys_Hisd.psTime\"c\n\006psData\022!\n\004Time\030\001 \001("
  "\0132\023.NicSys_Hisd.psTime\022%\n\005Value\030\002 \001(\0132\026."
  "NicSys_Hisd.psVariant\022\017\n\007Quality\030\003 \001(\005\";"
  "\n\013psDataField\022\014\n\004Time\030\001 \001(\005\022\r\n\005Value\030\002 \001"
  "(\005\022\017\n\007Quality\030\003 \001(\005*\250\003\n\016psDataTypeEnum\022\024"
  "\n\020psDataType_Empty\020\000\022\023\n\017psDataType_Bool\020"
  "\001\022\023\n\017psDataType_Int8\020\002\022\024\n\020psDataType_UIn"
  "t8\020\003\022\024\n\020psDataType_Int16\020\004\022\025\n\021psDataType"
  "_UInt16\020\005\022\024\n\020psDataType_Int32\020\006\022\025\n\021psDat"
  "aType_UInt32\020\007\022\024\n\020psDataType_Int64\020\010\022\025\n\021"
  "psDataType_UInt64\020\t\022\024\n\020psDataType_Float\020"
  "\n\022\025\n\021psDataType_Double\020\013\022\023\n\017psDataType_T"
  "ime\020\014\022\031\n\025psDataType_AnsiString\020\r\022\034\n\030psDa"
  "taType_UnicodeString\020\016\022\025\n\021psDataType_Str"
  "ing\020\017\022\023\n\017psDataType_Blob\020\020\022\022\n\016psDataType"
  "_Max\020\021b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_NicSysRpc_2eproto = {
  false, InitDefaults_NicSysRpc_2eproto, 
  descriptor_table_protodef_NicSysRpc_2eproto,
  "NicSysRpc.proto", &assign_descriptors_table_NicSysRpc_2eproto, 934,
};

void AddDescriptors_NicSysRpc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_NicSysRpc_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NicSysRpc_2eproto = []() { AddDescriptors_NicSysRpc_2eproto(); return true; }();
namespace NicSys_Hisd {
const ::google::protobuf::EnumDescriptor* psDataTypeEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_NicSysRpc_2eproto);
  return file_level_enum_descriptors_NicSysRpc_2eproto[0];
}
bool psDataTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void psTime::InitAsDefaultInstance() {
}
class psTime::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psTime::kSecondFieldNumber;
const int psTime::kMillisecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psTime::psTime()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psTime)
}
psTime::psTime(const psTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&second_, &from.second_,
    static_cast<size_t>(reinterpret_cast<char*>(&millisec_) -
    reinterpret_cast<char*>(&second_)) + sizeof(millisec_));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psTime)
}

void psTime::SharedCtor() {
  ::memset(&second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&millisec_) -
      reinterpret_cast<char*>(&second_)) + sizeof(millisec_));
}

psTime::~psTime() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psTime)
  SharedDtor();
}

void psTime::SharedDtor() {
}

void psTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psTime& psTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psTime_NicSysRpc_2eproto.base);
  return *internal_default_instance();
}


void psTime::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&millisec_) -
      reinterpret_cast<char*>(&second_)) + sizeof(millisec_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psTime::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psTime*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Second = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_second(value);
        break;
      }
      // int32 Millisec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_millisec(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Second = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Millisec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millisec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Second = 1;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->second(), output);
  }

  // int32 Millisec = 2;
  if (this->millisec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->millisec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psTime)
}

::google::protobuf::uint8* psTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Second = 1;
  if (this->second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->second(), target);
  }

  // int32 Millisec = 2;
  if (this->millisec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->millisec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psTime)
  return target;
}

size_t psTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Second = 1;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->second());
  }

  // int32 Millisec = 2;
  if (this->millisec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->millisec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psTime)
  GOOGLE_DCHECK_NE(&from, this);
  const psTime* source =
      ::google::protobuf::DynamicCastToGenerated<psTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psTime)
    MergeFrom(*source);
  }
}

void psTime::MergeFrom(const psTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.second() != 0) {
    set_second(from.second());
  }
  if (from.millisec() != 0) {
    set_millisec(from.millisec());
  }
}

void psTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psTime::CopyFrom(const psTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psTime::IsInitialized() const {
  return true;
}

void psTime::Swap(psTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psTime::InternalSwap(psTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(second_, other->second_);
  swap(millisec_, other->millisec_);
}

::google::protobuf::Metadata psTime::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysRpc_2eproto);
  return ::file_level_metadata_NicSysRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psVariant::InitAsDefaultInstance() {
  ::NicSys_Hisd::_psVariant_default_instance_._instance.get_mutable()->time_ = const_cast< ::NicSys_Hisd::psTime*>(
      ::NicSys_Hisd::psTime::internal_default_instance());
}
class psVariant::HasBitSetters {
 public:
  static const ::NicSys_Hisd::psTime& time(const psVariant* msg);
};

const ::NicSys_Hisd::psTime&
psVariant::HasBitSetters::time(const psVariant* msg) {
  return *msg->time_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psVariant::kDataTypeFieldNumber;
const int psVariant::kBoolFieldNumber;
const int psVariant::kInt8FieldNumber;
const int psVariant::kUInt8FieldNumber;
const int psVariant::kInt16FieldNumber;
const int psVariant::kUInt16FieldNumber;
const int psVariant::kInt32FieldNumber;
const int psVariant::kUInt32FieldNumber;
const int psVariant::kInt64FieldNumber;
const int psVariant::kUInt64FieldNumber;
const int psVariant::kFloatFieldNumber;
const int psVariant::kDoubleFieldNumber;
const int psVariant::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psVariant::psVariant()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psVariant)
}
psVariant::psVariant(const psVariant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::NicSys_Hisd::psTime(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&datatype_, &from.datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&float__) -
    reinterpret_cast<char*>(&datatype_)) + sizeof(float__));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psVariant)
}

void psVariant::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psVariant_NicSysRpc_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float__) -
      reinterpret_cast<char*>(&time_)) + sizeof(float__));
}

psVariant::~psVariant() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psVariant)
  SharedDtor();
}

void psVariant::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void psVariant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psVariant& psVariant::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psVariant_NicSysRpc_2eproto.base);
  return *internal_default_instance();
}


void psVariant::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psVariant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  ::memset(&datatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float__) -
      reinterpret_cast<char*>(&datatype_)) + sizeof(float__));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psVariant::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psVariant*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .NicSys_Hisd.psDataTypeEnum DataType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::NicSys_Hisd::psDataTypeEnum value = static_cast<::NicSys_Hisd::psDataTypeEnum>(val);
        msg->set_datatype(value);
        break;
      }
      // int32 Bool = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_bool_(value);
        break;
      }
      // sint32 Int8 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = ::google::protobuf::internal::WireFormatLite::ZigZagDecode32(val);
        msg->set_int8(value);
        break;
      }
      // int32 UInt8 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_uint8(value);
        break;
      }
      // sint32 Int16 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = ::google::protobuf::internal::WireFormatLite::ZigZagDecode32(val);
        msg->set_int16(value);
        break;
      }
      // int32 UInt16 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_uint16(value);
        break;
      }
      // sint32 Int32 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = ::google::protobuf::internal::WireFormatLite::ZigZagDecode32(val);
        msg->set_int32(value);
        break;
      }
      // int32 UInt32 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_uint32(value);
        break;
      }
      // sint64 Int64 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = ::google::protobuf::internal::WireFormatLite::ZigZagDecode64(val);
        msg->set_int64(value);
        break;
      }
      // int64 UInt64 = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_uint64(value);
        break;
      }
      // float Float = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_float_(val);
        break;
      }
      // double Double = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_double_(val);
        break;
      }
      // .NicSys_Hisd.psTime Time = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psTime::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psVariant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psVariant)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NicSys_Hisd.psDataTypeEnum DataType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::NicSys_Hisd::psDataTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Bool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bool__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 Int8 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &int8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UInt8 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uint8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 Int16 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &int16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UInt16 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uint16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 Int32 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UInt32 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 Int64 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 UInt64 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Float = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Double = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.psTime Time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psVariant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psVariant)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psVariant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psVariant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psDataTypeEnum DataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // int32 Bool = 2;
  if (this->bool_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bool_(), output);
  }

  // sint32 Int8 = 3;
  if (this->int8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->int8(), output);
  }

  // int32 UInt8 = 4;
  if (this->uint8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uint8(), output);
  }

  // sint32 Int16 = 5;
  if (this->int16() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->int16(), output);
  }

  // int32 UInt16 = 6;
  if (this->uint16() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uint16(), output);
  }

  // sint32 Int32 = 7;
  if (this->int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->int32(), output);
  }

  // int32 UInt32 = 8;
  if (this->uint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->uint32(), output);
  }

  // sint64 Int64 = 9;
  if (this->int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->int64(), output);
  }

  // int64 UInt64 = 10;
  if (this->uint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->uint64(), output);
  }

  // float Float = 11;
  if (this->float_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->float_(), output);
  }

  // double Double = 12;
  if (this->double_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->double_(), output);
  }

  // .NicSys_Hisd.psTime Time = 13;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psVariant)
}

::google::protobuf::uint8* psVariant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psVariant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psDataTypeEnum DataType = 1;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // int32 Bool = 2;
  if (this->bool_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bool_(), target);
  }

  // sint32 Int8 = 3;
  if (this->int8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->int8(), target);
  }

  // int32 UInt8 = 4;
  if (this->uint8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uint8(), target);
  }

  // sint32 Int16 = 5;
  if (this->int16() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->int16(), target);
  }

  // int32 UInt16 = 6;
  if (this->uint16() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uint16(), target);
  }

  // sint32 Int32 = 7;
  if (this->int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->int32(), target);
  }

  // int32 UInt32 = 8;
  if (this->uint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->uint32(), target);
  }

  // sint64 Int64 = 9;
  if (this->int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->int64(), target);
  }

  // int64 UInt64 = 10;
  if (this->uint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->uint64(), target);
  }

  // float Float = 11;
  if (this->float_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->float_(), target);
  }

  // double Double = 12;
  if (this->double_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->double_(), target);
  }

  // .NicSys_Hisd.psTime Time = 13;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::time(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psVariant)
  return target;
}

size_t psVariant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psVariant)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NicSys_Hisd.psTime Time = 13;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .NicSys_Hisd.psDataTypeEnum DataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  // int32 Bool = 2;
  if (this->bool_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bool_());
  }

  // sint32 Int8 = 3;
  if (this->int8() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->int8());
  }

  // int32 UInt8 = 4;
  if (this->uint8() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uint8());
  }

  // sint32 Int16 = 5;
  if (this->int16() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->int16());
  }

  // int32 UInt16 = 6;
  if (this->uint16() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uint16());
  }

  // sint32 Int32 = 7;
  if (this->int32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->int32());
  }

  // int32 UInt32 = 8;
  if (this->uint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uint32());
  }

  // sint64 Int64 = 9;
  if (this->int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->int64());
  }

  // int64 UInt64 = 10;
  if (this->uint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uint64());
  }

  // double Double = 12;
  if (this->double_() != 0) {
    total_size += 1 + 8;
  }

  // float Float = 11;
  if (this->float_() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psVariant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psVariant)
  GOOGLE_DCHECK_NE(&from, this);
  const psVariant* source =
      ::google::protobuf::DynamicCastToGenerated<psVariant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psVariant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psVariant)
    MergeFrom(*source);
  }
}

void psVariant::MergeFrom(const psVariant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psVariant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    mutable_time()->::NicSys_Hisd::psTime::MergeFrom(from.time());
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
  if (from.bool_() != 0) {
    set_bool_(from.bool_());
  }
  if (from.int8() != 0) {
    set_int8(from.int8());
  }
  if (from.uint8() != 0) {
    set_uint8(from.uint8());
  }
  if (from.int16() != 0) {
    set_int16(from.int16());
  }
  if (from.uint16() != 0) {
    set_uint16(from.uint16());
  }
  if (from.int32() != 0) {
    set_int32(from.int32());
  }
  if (from.uint32() != 0) {
    set_uint32(from.uint32());
  }
  if (from.int64() != 0) {
    set_int64(from.int64());
  }
  if (from.uint64() != 0) {
    set_uint64(from.uint64());
  }
  if (from.double_() != 0) {
    set_double_(from.double_());
  }
  if (from.float_() != 0) {
    set_float_(from.float_());
  }
}

void psVariant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psVariant::CopyFrom(const psVariant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psVariant::IsInitialized() const {
  return true;
}

void psVariant::Swap(psVariant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psVariant::InternalSwap(psVariant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(datatype_, other->datatype_);
  swap(bool__, other->bool__);
  swap(int8_, other->int8_);
  swap(uint8_, other->uint8_);
  swap(int16_, other->int16_);
  swap(uint16_, other->uint16_);
  swap(int32_, other->int32_);
  swap(uint32_, other->uint32_);
  swap(int64_, other->int64_);
  swap(uint64_, other->uint64_);
  swap(double__, other->double__);
  swap(float__, other->float__);
}

::google::protobuf::Metadata psVariant::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysRpc_2eproto);
  return ::file_level_metadata_NicSysRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psData::InitAsDefaultInstance() {
  ::NicSys_Hisd::_psData_default_instance_._instance.get_mutable()->time_ = const_cast< ::NicSys_Hisd::psTime*>(
      ::NicSys_Hisd::psTime::internal_default_instance());
  ::NicSys_Hisd::_psData_default_instance_._instance.get_mutable()->value_ = const_cast< ::NicSys_Hisd::psVariant*>(
      ::NicSys_Hisd::psVariant::internal_default_instance());
}
class psData::HasBitSetters {
 public:
  static const ::NicSys_Hisd::psTime& time(const psData* msg);
  static const ::NicSys_Hisd::psVariant& value(const psData* msg);
};

const ::NicSys_Hisd::psTime&
psData::HasBitSetters::time(const psData* msg) {
  return *msg->time_;
}
const ::NicSys_Hisd::psVariant&
psData::HasBitSetters::value(const psData* msg) {
  return *msg->value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psData::kTimeFieldNumber;
const int psData::kValueFieldNumber;
const int psData::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psData::psData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psData)
}
psData::psData(const psData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::NicSys_Hisd::psTime(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::NicSys_Hisd::psVariant(*from.value_);
  } else {
    value_ = nullptr;
  }
  quality_ = from.quality_;
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psData)
}

void psData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_psData_NicSysRpc_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&time_)) + sizeof(quality_));
}

psData::~psData() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psData)
  SharedDtor();
}

void psData::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete value_;
}

void psData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psData& psData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psData_NicSysRpc_2eproto.base);
  return *internal_default_instance();
}


void psData::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  quality_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psData*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .NicSys_Hisd.psTime Time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psTime::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // .NicSys_Hisd.psVariant Value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NicSys_Hisd::psVariant::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // int32 Quality = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_quality(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NicSys_Hisd.psTime Time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NicSys_Hisd.psVariant Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Quality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psTime Time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::time(this), output);
  }

  // .NicSys_Hisd.psVariant Value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psData)
}

::google::protobuf::uint8* psData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NicSys_Hisd.psTime Time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::time(this), deterministic, target);
  }

  // .NicSys_Hisd.psVariant Value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), deterministic, target);
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psData)
  return target;
}

size_t psData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NicSys_Hisd.psTime Time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .NicSys_Hisd.psVariant Value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psData)
  GOOGLE_DCHECK_NE(&from, this);
  const psData* source =
      ::google::protobuf::DynamicCastToGenerated<psData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psData)
    MergeFrom(*source);
  }
}

void psData::MergeFrom(const psData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    mutable_time()->::NicSys_Hisd::psTime::MergeFrom(from.time());
  }
  if (from.has_value()) {
    mutable_value()->::NicSys_Hisd::psVariant::MergeFrom(from.value());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void psData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psData::CopyFrom(const psData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psData::IsInitialized() const {
  return true;
}

void psData::Swap(psData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psData::InternalSwap(psData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(quality_, other->quality_);
}

::google::protobuf::Metadata psData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysRpc_2eproto);
  return ::file_level_metadata_NicSysRpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void psDataField::InitAsDefaultInstance() {
}
class psDataField::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int psDataField::kTimeFieldNumber;
const int psDataField::kValueFieldNumber;
const int psDataField::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

psDataField::psDataField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NicSys_Hisd.psDataField)
}
psDataField::psDataField(const psDataField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&time_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:NicSys_Hisd.psDataField)
}

void psDataField::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&time_)) + sizeof(quality_));
}

psDataField::~psDataField() {
  // @@protoc_insertion_point(destructor:NicSys_Hisd.psDataField)
  SharedDtor();
}

void psDataField::SharedDtor() {
}

void psDataField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const psDataField& psDataField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_psDataField_NicSysRpc_2eproto.base);
  return *internal_default_instance();
}


void psDataField::Clear() {
// @@protoc_insertion_point(message_clear_start:NicSys_Hisd.psDataField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&time_)) + sizeof(quality_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* psDataField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<psDataField*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_time(value);
        break;
      }
      // int32 Value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_value(value);
        break;
      }
      // int32 Quality = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_quality(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool psDataField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NicSys_Hisd.psDataField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Quality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NicSys_Hisd.psDataField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NicSys_Hisd.psDataField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void psDataField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NicSys_Hisd.psDataField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // int32 Value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NicSys_Hisd.psDataField)
}

::google::protobuf::uint8* psDataField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NicSys_Hisd.psDataField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // int32 Value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NicSys_Hisd.psDataField)
  return target;
}

size_t psDataField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NicSys_Hisd.psDataField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 Value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // int32 Quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void psDataField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NicSys_Hisd.psDataField)
  GOOGLE_DCHECK_NE(&from, this);
  const psDataField* source =
      ::google::protobuf::DynamicCastToGenerated<psDataField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NicSys_Hisd.psDataField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NicSys_Hisd.psDataField)
    MergeFrom(*source);
  }
}

void psDataField::MergeFrom(const psDataField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NicSys_Hisd.psDataField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void psDataField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NicSys_Hisd.psDataField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void psDataField::CopyFrom(const psDataField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NicSys_Hisd.psDataField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool psDataField::IsInitialized() const {
  return true;
}

void psDataField::Swap(psDataField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void psDataField::InternalSwap(psDataField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(quality_, other->quality_);
}

::google::protobuf::Metadata psDataField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_NicSysRpc_2eproto);
  return ::file_level_metadata_NicSysRpc_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NicSys_Hisd
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psTime* Arena::CreateMaybeMessage< ::NicSys_Hisd::psTime >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psTime >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psVariant* Arena::CreateMaybeMessage< ::NicSys_Hisd::psVariant >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psVariant >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psData* Arena::CreateMaybeMessage< ::NicSys_Hisd::psData >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psData >(arena);
}
template<> PROTOBUF_NOINLINE ::NicSys_Hisd::psDataField* Arena::CreateMaybeMessage< ::NicSys_Hisd::psDataField >(Arena* arena) {
  return Arena::CreateInternal< ::NicSys_Hisd::psDataField >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
