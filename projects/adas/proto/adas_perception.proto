syntax = "proto2";

package watrix.projects.adas.proto;


message CaffeNetConfig {
    optional int32 net_count = 1;
    optional string proto_filepath = 2;
    optional string weight_filepath = 3;
  }
  
  message BGRMean {
    optional float b = 1;
    optional float g = 2;
    optional float r = 3;
  }
  
message YoloConfig {
    optional CaffeNetConfig net = 1;
    optional BGRMean mean = 2;
    optional string label_filepath = 3;
    optional float normalize_value = 4;
    optional float confidence_threshold = 5;
    optional bool resize_keep_flag = 6;
  }



  message TrainSegConfig {
    optional CaffeNetConfig net = 1;
    optional BGRMean mean = 2;
  }


  message LaneSegConfig {
    optional CaffeNetConfig net = 1;
    optional BGRMean mean = 2;
    optional int32 feature_dim = 3;
  }


message TR34 {
    optional double dpoints_1 = 1;
    optional double dpoints_2 = 2;
    optional double dpoints_3 = 3;
    optional double dpoints_4 = 4;
    optional double dpoints_5 = 5;
    optional double dpoints_6 = 6;
    optional double dpoints_7 = 7;
    optional double dpoints_8 = 8;
    optional double dpoints_9 = 9;
    optional double dpoints_10 = 10;
    optional double dpoints_11 = 11;
    optional double dpoints_12 = 12;        
  }
  message LaneInvasionParameter{
      optional string output_dir                   = 1 ;// set output dir for debug temp results
      optional bool b_save_temp_images             = 2 ; // save temp image results
              
      optional bool b_draw_lane_surface            = 3 ; // draw lane surface
      optional bool b_draw_boxs                    = 4 ; // draw detection boxs
  
      optional bool b_draw_left_right_lane         = 5 ; // draw left right lane
      optional bool b_draw_other_lane              = 6 ; // draw other lane
  
      optional bool b_draw_left_right_fitted_lane  = 7 ; // draw left/right fitted lane
      optional bool b_draw_other_fitted_lane       = 8 ; // draw other fitted lane
  
      optional bool b_draw_expand_left_right_lane  = 9 ; // draw expand left right lane
      optional bool b_draw_lane_keypoint           = 10; // draw left/right lane top/bottom keypoints
  
      optional bool b_draw_safe_area               = 11; // draw safe area
      optional bool b_draw_safe_area_corner        = 12; // draw 4 corner
  
      optional bool b_draw_train_cvpoints          = 13; // draw train-class cvpoints
      optional bool b_draw_stats                   = 14; // draw stats 
  
      optional  int32 safe_area_y_step       = 15; // y step for drawing safe area  >=1
      optional double safe_area_alpha              = 16; // overlay aplpa
  
      optional bool use_tr34                       = 17; // true, use tr34; false, use tr33
      optional TR34 tr33                           = 18; // for caffe version
  
      optional TR34 tr34_long_b                          = 19;
      optional TR34 tr34_short_b                          = 20; 
  
      optional double z_height                     = 21;
  
      optional  int32 grid_size                         = 22; // default 8
      optional  int32 min_grid_count_in_cluster         = 23; // if grid_count <=10 then filter out this cluster
  
      optional  int32 cluster_type                      = 24; // (1 USER_MEANSHIFT,2 MLPACK_MEANSHIFT, 3 MLPACK_DBSCAN)
      optional double user_meanshift_kernel_bandwidth         = 25; 
      optional double user_meanshift_cluster_epsilon          = 26;
      optional double mlpack_meanshift_radius                 = 27;
      optional  int32 mlpack_meanshift_max_iterations   = 28; // max iterations
      optional double mlpack_meanshift_bandwidth              = 29 ;
  
      optional double mlpack_dbscan_cluster_epsilon            = 30; // not same
      optional  int32 mlpack_dbscan_min_pts              = 31; // cluster at least >=3 pts
  
      optional bool filter_out_lane_noise                       = 32; // filter out lane noise
      optional int32 min_area_threshold                           = 33; // min area for filter lane noise
      optional int32 min_lane_pts                                          = 34; // at least >=10 points for one lane
  
      optional int32 polyfit_order                                = 35; // by default 4;  value range = 1,2,...9
      optional bool reverse_xy                                  = 36; // whethe reverse xy
  
      optional int32 x_range_min                                  = 37;
      optional int32 x_range_max                                  = 38;
      optional int32 y_range_min                                  = 39;
      optional int32 y_range_max                                  = 40;
      optional bool fit_lane_bottom                             = 41; // fit lane bottom for distortion image
  
      optional double railway_standard_width                    = 42;
      optional double railway_half_width                        = 43;
      optional double railway_limit_width                       = 44;
      optional double railway_delta_width                       = 45; 
  
      optional double case1_x_threshold                         = 46; // default 
      optional double case1_y_threshold                         = 47; // 1050(21.6) - 1080() height
  
    optional bool save_image_result                           = 48;
      optional bool use_lane_status                             = 49;
      optional bool use_lidar_pointcloud_smallobj_invasion_detect=50;
  }

  // 感知模块配置
message PerceptionConfig 
{
  optional bool if_use_detect_model = 1;
  optional bool if_use_train_seg_model = 2;
  optional bool if_use_lane_seg_model = 3;
  optional bool save_image_result = 4;
  optional YoloConfig yolo = 5;
  optional TrainSegConfig trainseg = 6;
  optional LaneSegConfig laneseg = 7;
  optional LaneInvasionParameter laneinvasion = 8;
  //是否采用启动仿真器的仿真模式
  optional bool if_use_simulator = 9[default = false];  
}
