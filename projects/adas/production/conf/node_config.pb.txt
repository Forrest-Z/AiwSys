camera_1: {
  if_use: 1
  simulation: 1
  camera_id: 1
  sys_dev_id: 0
  camera_name: "left"
  simulation_folder: "/home/wayne/data/0712_13/32m_80cm_2019-07-10-15-32-38/cam1/"
  simulate_file_extension: ".png"
  simulate_sync_tickle : true
  interval_time: 200
  save_config:{
    save2disk:  0
    save_folder: "../data/camera/cam1/"
    file_type: ".png"
  }  
  get_image_count : 2
}
#/home/wayne/data/train_point/test1/png/
#  simulation: 0  硬件连接  1 图片模拟(jpg bmp)  2 视频模拟(mp4)
# interval_time 仿真模式下帧与帧的间隔 单位是毫秒，设置时跟据硬件性能进行设置 
# sys_dev_id 硬件连接环境下/dev/video*的编号
# get_image_count 保存时抽取率， 如：3 表示每收到3张保存1张 
# simulate_sync_tickle 只有在仿真模式下，与雷达同步时钟需要

camera_2: {
  if_use: 1
  simulation: 1
  camera_id: 2
  sys_dev_id: 2
  camera_name: "right"
  simulation_folder: "/home/wayne/data/0712_13/32m_80cm_2019-07-10-15-32-38/cam0/"
  simulate_file_extension: ".png"
  simulate_sync_tickle : true
  interval_time: 200
  save_config:{
    save2disk:  0
    save_folder: "../data/camera/cam2/"
    file_type: ".png"
  }  
  get_image_count: 2
}
#../data/simulation/camera/

sync: {
  simulation: 0
  camera_count: 2
  interval_time: 100
}
# interval_time 硬件连接时帧与帧最短时间进行选取
# simulation::0跳帧设置，interval_time是caera::interval_time的倍数，如sync:interval_time:200, camera::interval_time:100，则是相机2帧，取1帧

lidar: {
  simulation: 1
  save_config:{
    save2disk:  0
    save_folder: "../data/pcl/"
    file_type: ".csv"
  }
  ipconfig:{
    ip: "172.168.1.10"
    port: 8001
  }
  innov_yaml_folder : "../cfg/nodes/config/14211019_31_cali_public.yaml"
  interval_time: 200
  simulation_folder: "/home/wayne/data/0712_13/32m_80cm_2019-07-10-15-32-38/pcd/"
  simulation_file_type: ".pcd"
}
#1路cam 350ms sync 100ms lidar:80
#vlp   ip: "192.168.1.201"  port: 2368   simulation:pcd
#inno  ip: "172.168.1.10"   port: 8001   simulation:csv 

synctickle:{
  tickle_count : 2000
}
#模式环境下，相机雷达每秒的tick数

network: {
  ipconfig:{
    ip: "127.0.0.1" # server ip
    port: 6666
  }
}
perception: {
  if_use_detect_model: true
  if_use_train_seg_model: false
  if_use_lane_seg_model: true
  save_image_result: false

  # yolo config 
  yolo: {
    net: {
      net_count: 2
      proto_filepath: "../cfg/autotrain_models/det/tong/v4/deploy.prototxt"
      weight_filepath: "../cfg/autotrain_models/det/tong/v4/VOC0712Plus_refinedet_vgg16_512x512_ft_iter_160000.caffemodel"
    }
    mean: {
      b: 104
      g: 117
      r: 123
    }
    label_filepath: "../cfg/autotrain_models/det/tong/v4/labelmap.names"
    normalize_value: 1.0 #0.0039215
    confidence_threshold: 0.50
    resize_keep_flag: false
  }

  # trainseg config 
  trainseg {
     net: {
      net_count: 1

      proto_filepath: "../cfg/autotrain_models/det/tong/v4/deploy.prototxt"
      weight_filepath: "../cfg/autotrain_models/det/tong/v4/VOC0712Plus_refinedet_vgg16_512x512_ft_iter_160000.caffemodel"

      ### for dalian
      #proto_filepath: "../cfg/autotrain_models/seg/dl/v5/seg.prototxt"
      #weight_filepath: "./home/shuimujie/01.works/TrianPilot/project/trainpilot/cfg/autotrain_models/seg/dl/v5/seg.caffemodel"

      ### for guangzhou
      #proto_filepath: "../cfg/autotrain_models/seg/gz/v2/seg.prototxt"
      #weight_filepath: "../trainpilot/cfg/autotrain_models/seg/gz/v2/seg.caffemodel"
    }
    mean: {
      b: 104.00698793
      g: 116.66876762
      r: 122.67891434
    }
  }

  # laneseg config 
  laneseg {
     net: {
      net_count: 1
      proto_filepath: "../cfg/autotrain_models/lanenet/v5/model.prototxt"
      #sdk1.2.10
      weight_filepath: "../cfg/autotrain_models/pt/v7_sequence/20191209_seg_pics.pt"
      #sdk1.2.8
      #weight_filepath: "../cfg/autotrain_models/pt/v3_sequence/20191112_seg_pics.pt"

    }
    mean: {
      b: 103.939
      g: 116.779
      r: 123.68
    }    
#    mean: {
#      b: 104.00698793
#      g: 116.66876762
#      r: 122.67891434
#    }
    feature_dim : 8
  }
#feature_dim  for v1,v2,v3, use 8 for v4, use 16
  laneinvasion:{
    tr33 : {
      dpoints_1 : 0.000454941989844663
      dpoints_2 : 1.84395450492748e-05	
      dpoints_3 : -0.446669926140494
      dpoints_4 : 7.05709220832447e-06	
      dpoints_5 : -0.000167377794898800	
      dpoints_6 : 1.09624848239701
      dpoints_7 : 5.19714743486694e-07	
      dpoints_8 : 0.000224887814694170	
      dpoints_9 : -0.138644209831810
      dpoints_10 :  0
      dpoints_11 :  0
      dpoints_12 :  0       
    }
    tr34_short_b : {
      dpoints_1 :  2122.02989774275
      dpoints_2 :  -4.45967954912910
      dpoints_3 : 956.768344759744	
      dpoints_4 : -112.379804743330
      dpoints_5 :  -4.72262358581564
      dpoints_6 :  2130.86627431614
      dpoints_7 :  585.666379309876
      dpoints_8 :  4319.39283955568
      dpoints_9 :  -0.0120433495000550
      dpoints_10 : -0.00228454145517117
      dpoints_11 : 0.999924866479057
      dpoints_12 : 0.0275389000000000
    } 

     tr34_long_b: {
      dpoints_1 :  9119.46415171167
      dpoints_2 :  -170.663746026216
      dpoints_3 :  988.815262453997
      dpoints_4 :  -140.938141666000
      dpoints_5 :  147.115918643172
      dpoints_6 :  9125.31966104888
      dpoints_7 :  553.968253925716	
      dpoints_8 :  17669.7125138030
      dpoints_9 :  -0.0158225168965055
      dpoints_10 : -0.0174884208557346
      dpoints_11 : 0.999721862867384
      dpoints_12 : 0.416497000000000  
    }     
    output_dir : "../data/autotrain/sdk_seg/"
    b_save_temp_images : true # save temp image results

    b_draw_lane_surface : false  # draw lane surface
    b_draw_boxs : false  # draw detection boxs    
    b_draw_left_right_lane : true  # draw left right lane
    b_draw_other_lane : true  # draw other lane    
    b_draw_left_right_fitted_lane : true  # draw left/right fitted lane
    b_draw_other_fitted_lane : true  # draw other fitted lane

    b_draw_expand_left_right_lane : true  # draw expand left right lane
    b_draw_lane_keypoint : false  # draw left/right lane top/bottom keypoints   
    b_draw_safe_area : true  # draw safe area
    b_draw_safe_area_corner : false  # draw 4 corner

    b_draw_train_cvpoints : true  # draw train-class cvpoints
    b_draw_stats : true  # draw stats 

		safe_area_y_step : 1  # y step for drawing safe area  >:1
		safe_area_alpha : 0.5  # overlay aplpa

		use_tr34 :  true

		z_height : 1 

			# cluster grid related params
		grid_size : 8  # default 8
		min_grid_count_in_cluster : 10  # if grid_count <:10 then filter out this cluster

				# cluster algorithm params
				# config.cluster_type : MLPACK_MEANSHIFT  #   # (1 USER_MEANSHIFT,2 MLPACK_MEANSHIFT, 3 MLPACK_DBSCAN)
		cluster_type : 2
		user_meanshift_kernel_bandwidth : 0.52 
		user_meanshift_cluster_epsilon : 1.5
				
		mlpack_meanshift_radius : 1.5
		mlpack_meanshift_max_iterations  : 1000  # max iterations
		mlpack_meanshift_bandwidth : 0.52   #  0.50, 0.51, 0.52, ...0.6

		mlpack_dbscan_cluster_epsilon : 0.7  # not same
		mlpack_dbscan_min_pts  : 3  # cluster at least >:3 pts

				  # filter out lane noise params
		filter_out_lane_noise : true  # filter out lane noise
		min_area_threshold : 500  # min area for filter lane noise
		min_lane_pts : 10         # at least >:10 points for one lane

				  # polyfit lane 
		polyfit_order : 5  # by default 4  value range : 1,2,...9
		reverse_xy : true 
		x_range_min : 0
		x_range_max : 1920
		y_range_min : 440  # 512,568   640,440
		y_range_max : 1080 

				  # standard limit params (m)
		railway_standard_width : 1.435
		railway_half_width : 0.7175
		railway_limit_width : 1.500
		railway_delta_width : 0.7825 

		case1_x_threshold : 1.500
		case1_y_threshold :  15.0
		use_lane_status : true
		use_lidar_pointcloud_smallobj_invasion_detect : true

    save_image_result: true 
  }

  # mlpack_meanshift_radius 1.1 1.2 ...1.9
  # cluster_type (1 USER_MEANSHIFT, 2 MLPACK_MEANSHIFT)
  # cluster_type::1 radius_list[user_meanshift_cluster_epsilon1, user_meanshift_cluster_epsilon2, user_meanshift_cluster_epsilon3] 0.1 0.2 0.3 0.4 0.5
  # cluster_type::2 mlpack_meanshift_bandwidth1, mlpack_meanshift_bandwidth2, mlpack_meanshift_bandwidth3, ... 0.50, 0.51, 0.52, ...0.6
  # kernel_bandwidth(0.5,0.55,0.6...),user_meanshift_cluster_epsilon(1.0,1.5,2.0...)用于修改测试，聚类最佳超参显示效果
  # radius:1.1, bandwidth:0.55 v2 model  lanenet/v2/model.caffemodel  
  # radius:1.5, bandwidth:0.52 v3 model lanenet/v3/model.caffemodel

  lidar_queue_stamp : 200
  #lidar_queue_stamp 用于计算雷达队列中，帧与帧之间差值。需要与雷达队列尺寸匹配。来查找图像与雷达的最紧邻帧

}
# Put your config here
