// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point_cloud.proto

#ifndef PROTOBUF_INCLUDED_point_5fcloud_2eproto
#define PROTOBUF_INCLUDED_point_5fcloud_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_point_5fcloud_2eproto 

namespace protobuf_point_5fcloud_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_point_5fcloud_2eproto
namespace watrix {
namespace proto {
class LidarPoint;
class LidarPointDefaultTypeInternal;
extern LidarPointDefaultTypeInternal _LidarPoint_default_instance_;
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
}  // namespace proto
}  // namespace watrix
namespace google {
namespace protobuf {
template<> ::watrix::proto::LidarPoint* Arena::CreateMaybeMessage<::watrix::proto::LidarPoint>(Arena*);
template<> ::watrix::proto::PointCloud* Arena::CreateMaybeMessage<::watrix::proto::PointCloud>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace watrix {
namespace proto {

// ===================================================================

class LidarPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watrix.proto.LidarPoint) */ {
 public:
  LidarPoint();
  virtual ~LidarPoint();

  LidarPoint(const LidarPoint& from);

  inline LidarPoint& operator=(const LidarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarPoint(LidarPoint&& from) noexcept
    : LidarPoint() {
    *this = ::std::move(from);
  }

  inline LidarPoint& operator=(LidarPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarPoint* internal_default_instance() {
    return reinterpret_cast<const LidarPoint*>(
               &_LidarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LidarPoint* other);
  friend void swap(LidarPoint& a, LidarPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarPoint* New() const final {
    return CreateMaybeMessage<LidarPoint>(NULL);
  }

  LidarPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LidarPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LidarPoint& from);
  void MergeFrom(const LidarPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double intensity = 4;
  bool has_intensity() const;
  void clear_intensity();
  static const int kIntensityFieldNumber = 4;
  double intensity() const;
  void set_intensity(double value);

  // @@protoc_insertion_point(class_scope:watrix.proto.LidarPoint)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_intensity();
  void clear_has_intensity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double intensity_;
  friend struct ::protobuf_point_5fcloud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watrix.proto.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PointCloud* other);
  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(NULL);
  }

  PointCloud* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .watrix.proto.LidarPoint points = 2;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  ::watrix::proto::LidarPoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::watrix::proto::LidarPoint >*
      mutable_points();
  const ::watrix::proto::LidarPoint& points(int index) const;
  ::watrix::proto::LidarPoint* add_points();
  const ::google::protobuf::RepeatedPtrField< ::watrix::proto::LidarPoint >&
      points() const;

  // optional uint64 timestamp_msec = 1;
  bool has_timestamp_msec() const;
  void clear_timestamp_msec();
  static const int kTimestampMsecFieldNumber = 1;
  ::google::protobuf::uint64 timestamp_msec() const;
  void set_timestamp_msec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:watrix.proto.PointCloud)
 private:
  void set_has_timestamp_msec();
  void clear_has_timestamp_msec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::watrix::proto::LidarPoint > points_;
  ::google::protobuf::uint64 timestamp_msec_;
  friend struct ::protobuf_point_5fcloud_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarPoint

// optional double x = 1;
inline bool LidarPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double LidarPoint::x() const {
  // @@protoc_insertion_point(field_get:watrix.proto.LidarPoint.x)
  return x_;
}
inline void LidarPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:watrix.proto.LidarPoint.x)
}

// optional double y = 2;
inline bool LidarPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double LidarPoint::y() const {
  // @@protoc_insertion_point(field_get:watrix.proto.LidarPoint.y)
  return y_;
}
inline void LidarPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:watrix.proto.LidarPoint.y)
}

// optional double z = 3;
inline bool LidarPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double LidarPoint::z() const {
  // @@protoc_insertion_point(field_get:watrix.proto.LidarPoint.z)
  return z_;
}
inline void LidarPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:watrix.proto.LidarPoint.z)
}

// optional double intensity = 4;
inline bool LidarPoint::has_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarPoint::set_has_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarPoint::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarPoint::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline double LidarPoint::intensity() const {
  // @@protoc_insertion_point(field_get:watrix.proto.LidarPoint.intensity)
  return intensity_;
}
inline void LidarPoint::set_intensity(double value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:watrix.proto.LidarPoint.intensity)
}

// -------------------------------------------------------------------

// PointCloud

// optional uint64 timestamp_msec = 1;
inline bool PointCloud::has_timestamp_msec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointCloud::set_has_timestamp_msec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointCloud::clear_has_timestamp_msec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointCloud::clear_timestamp_msec() {
  timestamp_msec_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_msec();
}
inline ::google::protobuf::uint64 PointCloud::timestamp_msec() const {
  // @@protoc_insertion_point(field_get:watrix.proto.PointCloud.timestamp_msec)
  return timestamp_msec_;
}
inline void PointCloud::set_timestamp_msec(::google::protobuf::uint64 value) {
  set_has_timestamp_msec();
  timestamp_msec_ = value;
  // @@protoc_insertion_point(field_set:watrix.proto.PointCloud.timestamp_msec)
}

// repeated .watrix.proto.LidarPoint points = 2;
inline int PointCloud::points_size() const {
  return points_.size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline ::watrix::proto::LidarPoint* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:watrix.proto.PointCloud.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::watrix::proto::LidarPoint >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:watrix.proto.PointCloud.points)
  return &points_;
}
inline const ::watrix::proto::LidarPoint& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:watrix.proto.PointCloud.points)
  return points_.Get(index);
}
inline ::watrix::proto::LidarPoint* PointCloud::add_points() {
  // @@protoc_insertion_point(field_add:watrix.proto.PointCloud.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::watrix::proto::LidarPoint >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:watrix.proto.PointCloud.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace watrix

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_point_5fcloud_2eproto
