// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_image.proto

#include "camera_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_camera_5fimage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraImage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObjectsDistance;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CameraImages;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DetectionBox;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DetectionBoxs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fimage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MaxSafeDistance;
}  // namespace protobuf_camera_5fimage_2eproto
namespace watrix {
namespace proto {
class CameraImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraImage>
      _instance;
} _CameraImage_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class DetectionBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectionBox>
      _instance;
} _DetectionBox_default_instance_;
class DetectionBoxsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectionBoxs>
      _instance;
} _DetectionBoxs_default_instance_;
class ObjectsDistanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectsDistance>
      _instance;
} _ObjectsDistance_default_instance_;
class CameraImagesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraImages>
      _instance;
} _CameraImages_default_instance_;
class YoloDetectionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YoloDetectionResult>
      _instance;
} _YoloDetectionResult_default_instance_;
class LidarImageResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarImageResult>
      _instance;
} _LidarImageResult_default_instance_;
class SyncCameraResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncCameraResult>
      _instance;
} _SyncCameraResult_default_instance_;
class MaxSafeDistanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaxSafeDistance>
      _instance;
} _MaxSafeDistance_default_instance_;
class SendResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendResult>
      _instance;
} _SendResult_default_instance_;
class SyncPerceptionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncPerceptionResult>
      _instance;
} _SyncPerceptionResult_default_instance_;
}  // namespace proto
}  // namespace watrix
namespace protobuf_camera_5fimage_2eproto {
static void InitDefaultsCameraImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_CameraImage_default_instance_;
    new (ptr) ::watrix::proto::CameraImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::CameraImage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraImage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraImage}, {}};

static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_Point_default_instance_;
    new (ptr) ::watrix::proto::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsDetectionBox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_DetectionBox_default_instance_;
    new (ptr) ::watrix::proto::DetectionBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::DetectionBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DetectionBox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDetectionBox}, {
      &protobuf_camera_5fimage_2eproto::scc_info_Point.base,}};

static void InitDefaultsDetectionBoxs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_DetectionBoxs_default_instance_;
    new (ptr) ::watrix::proto::DetectionBoxs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::DetectionBoxs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DetectionBoxs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDetectionBoxs}, {
      &protobuf_camera_5fimage_2eproto::scc_info_DetectionBox.base,}};

static void InitDefaultsObjectsDistance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_ObjectsDistance_default_instance_;
    new (ptr) ::watrix::proto::ObjectsDistance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::ObjectsDistance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObjectsDistance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObjectsDistance}, {}};

static void InitDefaultsCameraImages() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_CameraImages_default_instance_;
    new (ptr) ::watrix::proto::CameraImages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::CameraImages::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CameraImages =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCameraImages}, {
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImage.base,}};

static void InitDefaultsYoloDetectionResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_YoloDetectionResult_default_instance_;
    new (ptr) ::watrix::proto::YoloDetectionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::YoloDetectionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_YoloDetectionResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsYoloDetectionResult}, {
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImage.base,
      &protobuf_camera_5fimage_2eproto::scc_info_DetectionBoxs.base,}};

static void InitDefaultsLidarImageResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_LidarImageResult_default_instance_;
    new (ptr) ::watrix::proto::LidarImageResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::LidarImageResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LidarImageResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLidarImageResult}, {
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImage.base,}};

static void InitDefaultsSyncCameraResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_SyncCameraResult_default_instance_;
    new (ptr) ::watrix::proto::SyncCameraResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::SyncCameraResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SyncCameraResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSyncCameraResult}, {
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImages.base,}};

static void InitDefaultsMaxSafeDistance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_MaxSafeDistance_default_instance_;
    new (ptr) ::watrix::proto::MaxSafeDistance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::MaxSafeDistance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MaxSafeDistance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMaxSafeDistance}, {
      &protobuf_camera_5fimage_2eproto::scc_info_ObjectsDistance.base,}};

static void InitDefaultsSendResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_SendResult_default_instance_;
    new (ptr) ::watrix::proto::SendResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::SendResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SendResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSendResult}, {
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImage.base,
      &protobuf_camera_5fimage_2eproto::scc_info_DetectionBoxs.base,
      &protobuf_camera_5fimage_2eproto::scc_info_MaxSafeDistance.base,}};

static void InitDefaultsSyncPerceptionResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::watrix::proto::_SyncPerceptionResult_default_instance_;
    new (ptr) ::watrix::proto::SyncPerceptionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::watrix::proto::SyncPerceptionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SyncPerceptionResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSyncPerceptionResult}, {
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImages.base,
      &protobuf_camera_5fimage_2eproto::scc_info_DetectionBoxs.base,
      &protobuf_camera_5fimage_2eproto::scc_info_MaxSafeDistance.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraImage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetectionBox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetectionBoxs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObjectsDistance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraImages.base);
  ::google::protobuf::internal::InitSCC(&scc_info_YoloDetectionResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LidarImageResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncCameraResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MaxSafeDistance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SendResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncPerceptionResult.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, timestamp_msec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImage, interval_time_),
  1,
  2,
  3,
  4,
  6,
  0,
  5,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::Point, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, xmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, ymax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, class_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, invasion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBox, invasion_distance_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBoxs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBoxs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::DetectionBoxs, boxs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::ObjectsDistance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::ObjectsDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::ObjectsDistance, object_distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImages, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::CameraImages, images_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::YoloDetectionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::YoloDetectionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::YoloDetectionResult, source_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::YoloDetectionResult, detection_boxs_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::LidarImageResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::LidarImageResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::LidarImageResult, lidar_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::LidarImageResult, timestamp_msec_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncCameraResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncCameraResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncCameraResult, sync_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncCameraResult, timestamp_msec_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::MaxSafeDistance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::MaxSafeDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::MaxSafeDistance, image_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::MaxSafeDistance, lidar_distance_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SendResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SendResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SendResult, source_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SendResult, seg_binary_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SendResult, detection_boxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SendResult, max_safe_distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, source_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, lane_binary_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, detection_boxs1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, detection_boxs2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::watrix::proto::SyncPerceptionResult, max_safe_distance_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::watrix::proto::CameraImage)},
  { 23, 31, sizeof(::watrix::proto::Point)},
  { 34, 49, sizeof(::watrix::proto::DetectionBox)},
  { 59, 65, sizeof(::watrix::proto::DetectionBoxs)},
  { 66, 72, sizeof(::watrix::proto::ObjectsDistance)},
  { 73, 79, sizeof(::watrix::proto::CameraImages)},
  { 80, 87, sizeof(::watrix::proto::YoloDetectionResult)},
  { 89, 96, sizeof(::watrix::proto::LidarImageResult)},
  { 98, 105, sizeof(::watrix::proto::SyncCameraResult)},
  { 107, 114, sizeof(::watrix::proto::MaxSafeDistance)},
  { 116, 125, sizeof(::watrix::proto::SendResult)},
  { 129, 139, sizeof(::watrix::proto::SyncPerceptionResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_CameraImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_DetectionBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_DetectionBoxs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_ObjectsDistance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_CameraImages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_YoloDetectionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_LidarImageResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_SyncCameraResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_MaxSafeDistance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_SendResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::watrix::proto::_SyncPerceptionResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "camera_image.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022camera_image.proto\022\014watrix.proto\"\227\002\n\013C"
      "ameraImage\022\021\n\tcamera_id\030\001 \001(\r\022\016\n\006height\030"
      "\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\017\n\007channel\030\004 \001(\r\0221\n"
      "\004type\030\005 \001(\0162#.watrix.proto.CameraImage.I"
      "mageType\022\014\n\004data\030\006 \001(\014\022\026\n\016timestamp_msec"
      "\030\007 \001(\004\022\023\n\013frame_count\030\010 \001(\004\022\025\n\rinterval_"
      "time\030\t \001(\005\"@\n\tImageType\022\n\n\006ORIGIN\020\000\022\017\n\013M"
      "ASK_RESULT\020\001\022\026\n\022YOLO_DETECT_RESULT\020\002\"(\n\005"
      "Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\336"
      "\001\n\014DetectionBox\022\014\n\004xmin\030\001 \001(\r\022\014\n\004ymin\030\002 "
      "\001(\r\022\014\n\004xmax\030\003 \001(\r\022\014\n\004ymax\030\004 \001(\r\022\022\n\nconfi"
      "dence\030\005 \001(\002\022\023\n\013class_index\030\006 \001(\r\022\022\n\nclas"
      "s_name\030\007 \001(\014\022%\n\010distance\030\010 \001(\0132\023.watrix."
      "proto.Point\022\027\n\017invasion_status\030\t \001(\005\022\031\n\021"
      "invasion_distance\030\n \001(\002\"9\n\rDetectionBoxs"
      "\022(\n\004boxs\030\001 \003(\0132\032.watrix.proto.DetectionB"
      "ox\"*\n\017ObjectsDistance\022\027\n\017object_distance"
      "\030\001 \001(\005\"9\n\014CameraImages\022)\n\006images\030\001 \003(\0132\031"
      ".watrix.proto.CameraImage\"{\n\023YoloDetecti"
      "onResult\022/\n\014source_image\030\001 \001(\0132\031.watrix."
      "proto.CameraImage\0223\n\016detection_boxs\030\002 \001("
      "\0132\033.watrix.proto.DetectionBoxs\"Z\n\020LidarI"
      "mageResult\022.\n\013lidar_image\030\001 \001(\0132\031.watrix"
      ".proto.CameraImage\022\026\n\016timestamp_msec\030\002 \001"
      "(\004\"[\n\020SyncCameraResult\022/\n\013sync_images\030\001 "
      "\001(\0132\032.watrix.proto.CameraImages\022\026\n\016times"
      "tamp_msec\030\002 \001(\004\"`\n\017MaxSafeDistance\022\026\n\016im"
      "age_distance\030\001 \001(\005\0225\n\016lidar_distance\030\002 \003"
      "(\0132\035.watrix.proto.ObjectsDistance\"\340\001\n\nSe"
      "ndResult\022/\n\014source_image\030\001 \001(\0132\031.watrix."
      "proto.CameraImage\0222\n\017seg_binary_mask\030\002 \001"
      "(\0132\031.watrix.proto.CameraImage\0223\n\016detecti"
      "on_boxs\030\003 \001(\0132\033.watrix.proto.DetectionBo"
      "xs\0228\n\021max_safe_distance\030\004 \001(\0132\035.watrix.p"
      "roto.MaxSafeDistance\"\246\002\n\024SyncPerceptionR"
      "esult\0221\n\rsource_images\030\001 \001(\0132\032.watrix.pr"
      "oto.CameraImages\0225\n\021lane_binary_masks\030\002 "
      "\001(\0132\032.watrix.proto.CameraImages\0224\n\017detec"
      "tion_boxs1\030\003 \001(\0132\033.watrix.proto.Detectio"
      "nBoxs\0224\n\017detection_boxs2\030\004 \001(\0132\033.watrix."
      "proto.DetectionBoxs\0228\n\021max_safe_distance"
      "\030\005 \001(\0132\035.watrix.proto.MaxSafeDistance"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_image.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camera_5fimage_2eproto
namespace watrix {
namespace proto {
const ::google::protobuf::EnumDescriptor* CameraImage_ImageType_descriptor() {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_5fimage_2eproto::file_level_enum_descriptors[0];
}
bool CameraImage_ImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraImage_ImageType CameraImage::ORIGIN;
const CameraImage_ImageType CameraImage::MASK_RESULT;
const CameraImage_ImageType CameraImage::YOLO_DETECT_RESULT;
const CameraImage_ImageType CameraImage::ImageType_MIN;
const CameraImage_ImageType CameraImage::ImageType_MAX;
const int CameraImage::ImageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CameraImage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraImage::kCameraIdFieldNumber;
const int CameraImage::kHeightFieldNumber;
const int CameraImage::kWidthFieldNumber;
const int CameraImage::kChannelFieldNumber;
const int CameraImage::kTypeFieldNumber;
const int CameraImage::kDataFieldNumber;
const int CameraImage::kTimestampMsecFieldNumber;
const int CameraImage::kFrameCountFieldNumber;
const int CameraImage::kIntervalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraImage::CameraImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.CameraImage)
}
CameraImage::CameraImage(const CameraImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_count_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(frame_count_));
  // @@protoc_insertion_point(copy_constructor:watrix.proto.CameraImage)
}

void CameraImage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_count_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(frame_count_));
}

CameraImage::~CameraImage() {
  // @@protoc_insertion_point(destructor:watrix.proto.CameraImage)
  SharedDtor();
}

void CameraImage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraImage::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraImage& CameraImage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_CameraImage.base);
  return *internal_default_instance();
}


void CameraImage::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.CameraImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&camera_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interval_time_) -
        reinterpret_cast<char*>(&camera_id_)) + sizeof(interval_time_));
  }
  frame_count_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.CameraImage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.CameraImage.ImageType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::watrix::proto::CameraImage_ImageType_IsValid(value)) {
            set_type(static_cast< ::watrix::proto::CameraImage_ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_msec = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_timestamp_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 frame_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interval_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_interval_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.CameraImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.CameraImage)
  return false;
#undef DO_
}

void CameraImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.CameraImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }

  // optional uint32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 channel = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  // optional .watrix.proto.CameraImage.ImageType type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional bytes data = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint64 timestamp_msec = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp_msec(), output);
  }

  // optional uint64 frame_count = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->frame_count(), output);
  }

  // optional int32 interval_time = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->interval_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.CameraImage)
}

::google::protobuf::uint8* CameraImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.CameraImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }

  // optional uint32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 channel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  // optional .watrix.proto.CameraImage.ImageType type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional bytes data = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint64 timestamp_msec = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp_msec(), target);
  }

  // optional uint64 frame_count = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->frame_count(), target);
  }

  // optional int32 interval_time = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->interval_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.CameraImage)
  return target;
}

size_t CameraImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.CameraImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_id());
    }

    // optional uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 timestamp_msec = 7;
    if (has_timestamp_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_msec());
    }

    // optional .watrix.proto.CameraImage.ImageType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 interval_time = 9;
    if (has_interval_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval_time());
    }

  }
  // optional uint64 frame_count = 8;
  if (has_frame_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frame_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.CameraImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.CameraImage)
    MergeFrom(*source);
  }
}

void CameraImage::MergeFrom(const CameraImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      camera_id_ = from.camera_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_msec_ = from.timestamp_msec_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      interval_time_ = from.interval_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_frame_count(from.frame_count());
  }
}

void CameraImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraImage::CopyFrom(const CameraImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraImage::IsInitialized() const {
  return true;
}

void CameraImage::Swap(CameraImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraImage::InternalSwap(CameraImage* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(camera_id_, other->camera_id_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(channel_, other->channel_);
  swap(timestamp_msec_, other->timestamp_msec_);
  swap(type_, other->type_);
  swap(interval_time_, other->interval_time_);
  swap(frame_count_, other->frame_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraImage::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:watrix.proto.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:watrix.proto.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectionBox::InitAsDefaultInstance() {
  ::watrix::proto::_DetectionBox_default_instance_._instance.get_mutable()->distance_ = const_cast< ::watrix::proto::Point*>(
      ::watrix::proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionBox::kXminFieldNumber;
const int DetectionBox::kYminFieldNumber;
const int DetectionBox::kXmaxFieldNumber;
const int DetectionBox::kYmaxFieldNumber;
const int DetectionBox::kConfidenceFieldNumber;
const int DetectionBox::kClassIndexFieldNumber;
const int DetectionBox::kClassNameFieldNumber;
const int DetectionBox::kDistanceFieldNumber;
const int DetectionBox::kInvasionStatusFieldNumber;
const int DetectionBox::kInvasionDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionBox::DetectionBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_DetectionBox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.DetectionBox)
}
DetectionBox::DetectionBox(const DetectionBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_distance()) {
    distance_ = new ::watrix::proto::Point(*from.distance_);
  } else {
    distance_ = NULL;
  }
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&invasion_distance_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(invasion_distance_));
  // @@protoc_insertion_point(copy_constructor:watrix.proto.DetectionBox)
}

void DetectionBox::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invasion_distance_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(invasion_distance_));
}

DetectionBox::~DetectionBox() {
  // @@protoc_insertion_point(destructor:watrix.proto.DetectionBox)
  SharedDtor();
}

void DetectionBox::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete distance_;
}

void DetectionBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DetectionBox::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectionBox& DetectionBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_DetectionBox.base);
  return *internal_default_instance();
}


void DetectionBox::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.DetectionBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      class_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(distance_ != NULL);
      distance_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&class_index_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(class_index_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&invasion_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invasion_distance_) -
        reinterpret_cast<char*>(&invasion_status_)) + sizeof(invasion_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectionBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.DetectionBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xmax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_xmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ymax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 class_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_class_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes class_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.Point distance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 invasion_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_invasion_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invasion_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float invasion_distance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_invasion_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &invasion_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.DetectionBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.DetectionBox)
  return false;
#undef DO_
}

void DetectionBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.DetectionBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 xmin = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xmin(), output);
  }

  // optional uint32 ymin = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ymin(), output);
  }

  // optional uint32 xmax = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xmax(), output);
  }

  // optional uint32 ymax = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ymax(), output);
  }

  // optional float confidence = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence(), output);
  }

  // optional uint32 class_index = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->class_index(), output);
  }

  // optional bytes class_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->class_name(), output);
  }

  // optional .watrix.proto.Point distance = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_distance(), output);
  }

  // optional int32 invasion_status = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->invasion_status(), output);
  }

  // optional float invasion_distance = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->invasion_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.DetectionBox)
}

::google::protobuf::uint8* DetectionBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.DetectionBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 xmin = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xmin(), target);
  }

  // optional uint32 ymin = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ymin(), target);
  }

  // optional uint32 xmax = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xmax(), target);
  }

  // optional uint32 ymax = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ymax(), target);
  }

  // optional float confidence = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence(), target);
  }

  // optional uint32 class_index = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->class_index(), target);
  }

  // optional bytes class_name = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->class_name(), target);
  }

  // optional .watrix.proto.Point distance = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_distance(), deterministic, target);
  }

  // optional int32 invasion_status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->invasion_status(), target);
  }

  // optional float invasion_distance = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->invasion_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.DetectionBox)
  return target;
}

size_t DetectionBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.DetectionBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes class_name = 7;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->class_name());
    }

    // optional .watrix.proto.Point distance = 8;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *distance_);
    }

    // optional uint32 xmin = 1;
    if (has_xmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xmin());
    }

    // optional uint32 ymin = 2;
    if (has_ymin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ymin());
    }

    // optional uint32 xmax = 3;
    if (has_xmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xmax());
    }

    // optional uint32 ymax = 4;
    if (has_ymax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ymax());
    }

    // optional float confidence = 5;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional uint32 class_index = 6;
    if (has_class_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_index());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 invasion_status = 9;
    if (has_invasion_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invasion_status());
    }

    // optional float invasion_distance = 10;
    if (has_invasion_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.DetectionBox)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.DetectionBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.DetectionBox)
    MergeFrom(*source);
  }
}

void DetectionBox::MergeFrom(const DetectionBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.DetectionBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_distance()->::watrix::proto::Point::MergeFrom(from.distance());
    }
    if (cached_has_bits & 0x00000004u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000010u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000020u) {
      ymax_ = from.ymax_;
    }
    if (cached_has_bits & 0x00000040u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000080u) {
      class_index_ = from.class_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      invasion_status_ = from.invasion_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      invasion_distance_ = from.invasion_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.DetectionBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionBox::CopyFrom(const DetectionBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.DetectionBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionBox::IsInitialized() const {
  return true;
}

void DetectionBox::Swap(DetectionBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionBox::InternalSwap(DetectionBox* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distance_, other->distance_);
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(xmax_, other->xmax_);
  swap(ymax_, other->ymax_);
  swap(confidence_, other->confidence_);
  swap(class_index_, other->class_index_);
  swap(invasion_status_, other->invasion_status_);
  swap(invasion_distance_, other->invasion_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetectionBox::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectionBoxs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionBoxs::kBoxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionBoxs::DetectionBoxs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_DetectionBoxs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.DetectionBoxs)
}
DetectionBoxs::DetectionBoxs(const DetectionBoxs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      boxs_(from.boxs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:watrix.proto.DetectionBoxs)
}

void DetectionBoxs::SharedCtor() {
}

DetectionBoxs::~DetectionBoxs() {
  // @@protoc_insertion_point(destructor:watrix.proto.DetectionBoxs)
  SharedDtor();
}

void DetectionBoxs::SharedDtor() {
}

void DetectionBoxs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DetectionBoxs::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectionBoxs& DetectionBoxs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_DetectionBoxs.base);
  return *internal_default_instance();
}


void DetectionBoxs::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.DetectionBoxs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectionBoxs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.DetectionBoxs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .watrix.proto.DetectionBox boxs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_boxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.DetectionBoxs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.DetectionBoxs)
  return false;
#undef DO_
}

void DetectionBoxs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.DetectionBoxs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .watrix.proto.DetectionBox boxs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boxs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->boxs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.DetectionBoxs)
}

::google::protobuf::uint8* DetectionBoxs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.DetectionBoxs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .watrix.proto.DetectionBox boxs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boxs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->boxs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.DetectionBoxs)
  return target;
}

size_t DetectionBoxs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.DetectionBoxs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .watrix.proto.DetectionBox boxs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->boxs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boxs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionBoxs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.DetectionBoxs)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionBoxs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionBoxs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.DetectionBoxs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.DetectionBoxs)
    MergeFrom(*source);
  }
}

void DetectionBoxs::MergeFrom(const DetectionBoxs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.DetectionBoxs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boxs_.MergeFrom(from.boxs_);
}

void DetectionBoxs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.DetectionBoxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionBoxs::CopyFrom(const DetectionBoxs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.DetectionBoxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionBoxs::IsInitialized() const {
  return true;
}

void DetectionBoxs::Swap(DetectionBoxs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionBoxs::InternalSwap(DetectionBoxs* other) {
  using std::swap;
  CastToBase(&boxs_)->InternalSwap(CastToBase(&other->boxs_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetectionBoxs::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectsDistance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectsDistance::kObjectDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectsDistance::ObjectsDistance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_ObjectsDistance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.ObjectsDistance)
}
ObjectsDistance::ObjectsDistance(const ObjectsDistance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_distance_ = from.object_distance_;
  // @@protoc_insertion_point(copy_constructor:watrix.proto.ObjectsDistance)
}

void ObjectsDistance::SharedCtor() {
  object_distance_ = 0;
}

ObjectsDistance::~ObjectsDistance() {
  // @@protoc_insertion_point(destructor:watrix.proto.ObjectsDistance)
  SharedDtor();
}

void ObjectsDistance::SharedDtor() {
}

void ObjectsDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObjectsDistance::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectsDistance& ObjectsDistance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_ObjectsDistance.base);
  return *internal_default_instance();
}


void ObjectsDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.ObjectsDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectsDistance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.ObjectsDistance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 object_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_object_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.ObjectsDistance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.ObjectsDistance)
  return false;
#undef DO_
}

void ObjectsDistance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.ObjectsDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->object_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.ObjectsDistance)
}

::google::protobuf::uint8* ObjectsDistance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.ObjectsDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->object_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.ObjectsDistance)
  return target;
}

size_t ObjectsDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.ObjectsDistance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 object_distance = 1;
  if (has_object_distance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectsDistance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.ObjectsDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectsDistance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectsDistance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.ObjectsDistance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.ObjectsDistance)
    MergeFrom(*source);
  }
}

void ObjectsDistance::MergeFrom(const ObjectsDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.ObjectsDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_distance()) {
    set_object_distance(from.object_distance());
  }
}

void ObjectsDistance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.ObjectsDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectsDistance::CopyFrom(const ObjectsDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.ObjectsDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectsDistance::IsInitialized() const {
  return true;
}

void ObjectsDistance::Swap(ObjectsDistance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectsDistance::InternalSwap(ObjectsDistance* other) {
  using std::swap;
  swap(object_distance_, other->object_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObjectsDistance::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraImages::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraImages::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraImages::CameraImages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_CameraImages.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.CameraImages)
}
CameraImages::CameraImages(const CameraImages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:watrix.proto.CameraImages)
}

void CameraImages::SharedCtor() {
}

CameraImages::~CameraImages() {
  // @@protoc_insertion_point(destructor:watrix.proto.CameraImages)
  SharedDtor();
}

void CameraImages::SharedDtor() {
}

void CameraImages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraImages::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraImages& CameraImages::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_CameraImages.base);
  return *internal_default_instance();
}


void CameraImages::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.CameraImages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraImages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.CameraImages)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .watrix.proto.CameraImage images = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.CameraImages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.CameraImages)
  return false;
#undef DO_
}

void CameraImages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.CameraImages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .watrix.proto.CameraImage images = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->images(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.CameraImages)
}

::google::protobuf::uint8* CameraImages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.CameraImages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .watrix.proto.CameraImage images = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->images(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.CameraImages)
  return target;
}

size_t CameraImages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.CameraImages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .watrix.proto.CameraImage images = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->images(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraImages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.CameraImages)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraImages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraImages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.CameraImages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.CameraImages)
    MergeFrom(*source);
  }
}

void CameraImages::MergeFrom(const CameraImages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.CameraImages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
}

void CameraImages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.CameraImages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraImages::CopyFrom(const CameraImages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.CameraImages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraImages::IsInitialized() const {
  return true;
}

void CameraImages::Swap(CameraImages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraImages::InternalSwap(CameraImages* other) {
  using std::swap;
  CastToBase(&images_)->InternalSwap(CastToBase(&other->images_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraImages::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void YoloDetectionResult::InitAsDefaultInstance() {
  ::watrix::proto::_YoloDetectionResult_default_instance_._instance.get_mutable()->source_image_ = const_cast< ::watrix::proto::CameraImage*>(
      ::watrix::proto::CameraImage::internal_default_instance());
  ::watrix::proto::_YoloDetectionResult_default_instance_._instance.get_mutable()->detection_boxs_ = const_cast< ::watrix::proto::DetectionBoxs*>(
      ::watrix::proto::DetectionBoxs::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YoloDetectionResult::kSourceImageFieldNumber;
const int YoloDetectionResult::kDetectionBoxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YoloDetectionResult::YoloDetectionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_YoloDetectionResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.YoloDetectionResult)
}
YoloDetectionResult::YoloDetectionResult(const YoloDetectionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_image()) {
    source_image_ = new ::watrix::proto::CameraImage(*from.source_image_);
  } else {
    source_image_ = NULL;
  }
  if (from.has_detection_boxs()) {
    detection_boxs_ = new ::watrix::proto::DetectionBoxs(*from.detection_boxs_);
  } else {
    detection_boxs_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watrix.proto.YoloDetectionResult)
}

void YoloDetectionResult::SharedCtor() {
  ::memset(&source_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_boxs_) -
      reinterpret_cast<char*>(&source_image_)) + sizeof(detection_boxs_));
}

YoloDetectionResult::~YoloDetectionResult() {
  // @@protoc_insertion_point(destructor:watrix.proto.YoloDetectionResult)
  SharedDtor();
}

void YoloDetectionResult::SharedDtor() {
  if (this != internal_default_instance()) delete source_image_;
  if (this != internal_default_instance()) delete detection_boxs_;
}

void YoloDetectionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* YoloDetectionResult::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YoloDetectionResult& YoloDetectionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_YoloDetectionResult.base);
  return *internal_default_instance();
}


void YoloDetectionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.YoloDetectionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_image_ != NULL);
      source_image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(detection_boxs_ != NULL);
      detection_boxs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YoloDetectionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.YoloDetectionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .watrix.proto.CameraImage source_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.DetectionBoxs detection_boxs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_boxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.YoloDetectionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.YoloDetectionResult)
  return false;
#undef DO_
}

void YoloDetectionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.YoloDetectionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImage source_image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_source_image(), output);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_boxs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.YoloDetectionResult)
}

::google::protobuf::uint8* YoloDetectionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.YoloDetectionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImage source_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_source_image(), deterministic, target);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_boxs(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.YoloDetectionResult)
  return target;
}

size_t YoloDetectionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.YoloDetectionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .watrix.proto.CameraImage source_image = 1;
    if (has_source_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_image_);
    }

    // optional .watrix.proto.DetectionBoxs detection_boxs = 2;
    if (has_detection_boxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detection_boxs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YoloDetectionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.YoloDetectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloDetectionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YoloDetectionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.YoloDetectionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.YoloDetectionResult)
    MergeFrom(*source);
  }
}

void YoloDetectionResult::MergeFrom(const YoloDetectionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.YoloDetectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_source_image()->::watrix::proto::CameraImage::MergeFrom(from.source_image());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_detection_boxs()->::watrix::proto::DetectionBoxs::MergeFrom(from.detection_boxs());
    }
  }
}

void YoloDetectionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.YoloDetectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloDetectionResult::CopyFrom(const YoloDetectionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.YoloDetectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloDetectionResult::IsInitialized() const {
  return true;
}

void YoloDetectionResult::Swap(YoloDetectionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoloDetectionResult::InternalSwap(YoloDetectionResult* other) {
  using std::swap;
  swap(source_image_, other->source_image_);
  swap(detection_boxs_, other->detection_boxs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata YoloDetectionResult::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarImageResult::InitAsDefaultInstance() {
  ::watrix::proto::_LidarImageResult_default_instance_._instance.get_mutable()->lidar_image_ = const_cast< ::watrix::proto::CameraImage*>(
      ::watrix::proto::CameraImage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarImageResult::kLidarImageFieldNumber;
const int LidarImageResult::kTimestampMsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarImageResult::LidarImageResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_LidarImageResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.LidarImageResult)
}
LidarImageResult::LidarImageResult(const LidarImageResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lidar_image()) {
    lidar_image_ = new ::watrix::proto::CameraImage(*from.lidar_image_);
  } else {
    lidar_image_ = NULL;
  }
  timestamp_msec_ = from.timestamp_msec_;
  // @@protoc_insertion_point(copy_constructor:watrix.proto.LidarImageResult)
}

void LidarImageResult::SharedCtor() {
  ::memset(&lidar_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_msec_) -
      reinterpret_cast<char*>(&lidar_image_)) + sizeof(timestamp_msec_));
}

LidarImageResult::~LidarImageResult() {
  // @@protoc_insertion_point(destructor:watrix.proto.LidarImageResult)
  SharedDtor();
}

void LidarImageResult::SharedDtor() {
  if (this != internal_default_instance()) delete lidar_image_;
}

void LidarImageResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LidarImageResult::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarImageResult& LidarImageResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_LidarImageResult.base);
  return *internal_default_instance();
}


void LidarImageResult::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.LidarImageResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lidar_image_ != NULL);
    lidar_image_->Clear();
  }
  timestamp_msec_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LidarImageResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.LidarImageResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .watrix.proto.CameraImage lidar_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_msec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.LidarImageResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.LidarImageResult)
  return false;
#undef DO_
}

void LidarImageResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.LidarImageResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImage lidar_image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_lidar_image(), output);
  }

  // optional uint64 timestamp_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_msec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.LidarImageResult)
}

::google::protobuf::uint8* LidarImageResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.LidarImageResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImage lidar_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_lidar_image(), deterministic, target);
  }

  // optional uint64 timestamp_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp_msec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.LidarImageResult)
  return target;
}

size_t LidarImageResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.LidarImageResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .watrix.proto.CameraImage lidar_image = 1;
    if (has_lidar_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lidar_image_);
    }

    // optional uint64 timestamp_msec = 2;
    if (has_timestamp_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_msec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarImageResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.LidarImageResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarImageResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarImageResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.LidarImageResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.LidarImageResult)
    MergeFrom(*source);
  }
}

void LidarImageResult::MergeFrom(const LidarImageResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.LidarImageResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lidar_image()->::watrix::proto::CameraImage::MergeFrom(from.lidar_image());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_msec_ = from.timestamp_msec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarImageResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.LidarImageResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarImageResult::CopyFrom(const LidarImageResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.LidarImageResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarImageResult::IsInitialized() const {
  return true;
}

void LidarImageResult::Swap(LidarImageResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarImageResult::InternalSwap(LidarImageResult* other) {
  using std::swap;
  swap(lidar_image_, other->lidar_image_);
  swap(timestamp_msec_, other->timestamp_msec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LidarImageResult::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SyncCameraResult::InitAsDefaultInstance() {
  ::watrix::proto::_SyncCameraResult_default_instance_._instance.get_mutable()->sync_images_ = const_cast< ::watrix::proto::CameraImages*>(
      ::watrix::proto::CameraImages::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncCameraResult::kSyncImagesFieldNumber;
const int SyncCameraResult::kTimestampMsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncCameraResult::SyncCameraResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_SyncCameraResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.SyncCameraResult)
}
SyncCameraResult::SyncCameraResult(const SyncCameraResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sync_images()) {
    sync_images_ = new ::watrix::proto::CameraImages(*from.sync_images_);
  } else {
    sync_images_ = NULL;
  }
  timestamp_msec_ = from.timestamp_msec_;
  // @@protoc_insertion_point(copy_constructor:watrix.proto.SyncCameraResult)
}

void SyncCameraResult::SharedCtor() {
  ::memset(&sync_images_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_msec_) -
      reinterpret_cast<char*>(&sync_images_)) + sizeof(timestamp_msec_));
}

SyncCameraResult::~SyncCameraResult() {
  // @@protoc_insertion_point(destructor:watrix.proto.SyncCameraResult)
  SharedDtor();
}

void SyncCameraResult::SharedDtor() {
  if (this != internal_default_instance()) delete sync_images_;
}

void SyncCameraResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SyncCameraResult::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncCameraResult& SyncCameraResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_SyncCameraResult.base);
  return *internal_default_instance();
}


void SyncCameraResult::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.SyncCameraResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sync_images_ != NULL);
    sync_images_->Clear();
  }
  timestamp_msec_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncCameraResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.SyncCameraResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .watrix.proto.CameraImages sync_images = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_msec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.SyncCameraResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.SyncCameraResult)
  return false;
#undef DO_
}

void SyncCameraResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.SyncCameraResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImages sync_images = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sync_images(), output);
  }

  // optional uint64 timestamp_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_msec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.SyncCameraResult)
}

::google::protobuf::uint8* SyncCameraResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.SyncCameraResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImages sync_images = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sync_images(), deterministic, target);
  }

  // optional uint64 timestamp_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp_msec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.SyncCameraResult)
  return target;
}

size_t SyncCameraResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.SyncCameraResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .watrix.proto.CameraImages sync_images = 1;
    if (has_sync_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sync_images_);
    }

    // optional uint64 timestamp_msec = 2;
    if (has_timestamp_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_msec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncCameraResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.SyncCameraResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncCameraResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncCameraResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.SyncCameraResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.SyncCameraResult)
    MergeFrom(*source);
  }
}

void SyncCameraResult::MergeFrom(const SyncCameraResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.SyncCameraResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sync_images()->::watrix::proto::CameraImages::MergeFrom(from.sync_images());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_msec_ = from.timestamp_msec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncCameraResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.SyncCameraResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncCameraResult::CopyFrom(const SyncCameraResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.SyncCameraResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncCameraResult::IsInitialized() const {
  return true;
}

void SyncCameraResult::Swap(SyncCameraResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncCameraResult::InternalSwap(SyncCameraResult* other) {
  using std::swap;
  swap(sync_images_, other->sync_images_);
  swap(timestamp_msec_, other->timestamp_msec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SyncCameraResult::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaxSafeDistance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaxSafeDistance::kImageDistanceFieldNumber;
const int MaxSafeDistance::kLidarDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaxSafeDistance::MaxSafeDistance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_MaxSafeDistance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.MaxSafeDistance)
}
MaxSafeDistance::MaxSafeDistance(const MaxSafeDistance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lidar_distance_(from.lidar_distance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_distance_ = from.image_distance_;
  // @@protoc_insertion_point(copy_constructor:watrix.proto.MaxSafeDistance)
}

void MaxSafeDistance::SharedCtor() {
  image_distance_ = 0;
}

MaxSafeDistance::~MaxSafeDistance() {
  // @@protoc_insertion_point(destructor:watrix.proto.MaxSafeDistance)
  SharedDtor();
}

void MaxSafeDistance::SharedDtor() {
}

void MaxSafeDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MaxSafeDistance::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaxSafeDistance& MaxSafeDistance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_MaxSafeDistance.base);
  return *internal_default_instance();
}


void MaxSafeDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.MaxSafeDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lidar_distance_.Clear();
  image_distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaxSafeDistance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.MaxSafeDistance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 image_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_image_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .watrix.proto.ObjectsDistance lidar_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lidar_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.MaxSafeDistance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.MaxSafeDistance)
  return false;
#undef DO_
}

void MaxSafeDistance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.MaxSafeDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 image_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->image_distance(), output);
  }

  // repeated .watrix.proto.ObjectsDistance lidar_distance = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_distance_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lidar_distance(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.MaxSafeDistance)
}

::google::protobuf::uint8* MaxSafeDistance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.MaxSafeDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 image_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->image_distance(), target);
  }

  // repeated .watrix.proto.ObjectsDistance lidar_distance = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_distance_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lidar_distance(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.MaxSafeDistance)
  return target;
}

size_t MaxSafeDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.MaxSafeDistance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .watrix.proto.ObjectsDistance lidar_distance = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_distance_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lidar_distance(static_cast<int>(i)));
    }
  }

  // optional int32 image_distance = 1;
  if (has_image_distance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxSafeDistance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.MaxSafeDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxSafeDistance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaxSafeDistance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.MaxSafeDistance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.MaxSafeDistance)
    MergeFrom(*source);
  }
}

void MaxSafeDistance::MergeFrom(const MaxSafeDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.MaxSafeDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lidar_distance_.MergeFrom(from.lidar_distance_);
  if (from.has_image_distance()) {
    set_image_distance(from.image_distance());
  }
}

void MaxSafeDistance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.MaxSafeDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxSafeDistance::CopyFrom(const MaxSafeDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.MaxSafeDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxSafeDistance::IsInitialized() const {
  return true;
}

void MaxSafeDistance::Swap(MaxSafeDistance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaxSafeDistance::InternalSwap(MaxSafeDistance* other) {
  using std::swap;
  CastToBase(&lidar_distance_)->InternalSwap(CastToBase(&other->lidar_distance_));
  swap(image_distance_, other->image_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MaxSafeDistance::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendResult::InitAsDefaultInstance() {
  ::watrix::proto::_SendResult_default_instance_._instance.get_mutable()->source_image_ = const_cast< ::watrix::proto::CameraImage*>(
      ::watrix::proto::CameraImage::internal_default_instance());
  ::watrix::proto::_SendResult_default_instance_._instance.get_mutable()->seg_binary_mask_ = const_cast< ::watrix::proto::CameraImage*>(
      ::watrix::proto::CameraImage::internal_default_instance());
  ::watrix::proto::_SendResult_default_instance_._instance.get_mutable()->detection_boxs_ = const_cast< ::watrix::proto::DetectionBoxs*>(
      ::watrix::proto::DetectionBoxs::internal_default_instance());
  ::watrix::proto::_SendResult_default_instance_._instance.get_mutable()->max_safe_distance_ = const_cast< ::watrix::proto::MaxSafeDistance*>(
      ::watrix::proto::MaxSafeDistance::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendResult::kSourceImageFieldNumber;
const int SendResult::kSegBinaryMaskFieldNumber;
const int SendResult::kDetectionBoxsFieldNumber;
const int SendResult::kMaxSafeDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendResult::SendResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_SendResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.SendResult)
}
SendResult::SendResult(const SendResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_image()) {
    source_image_ = new ::watrix::proto::CameraImage(*from.source_image_);
  } else {
    source_image_ = NULL;
  }
  if (from.has_seg_binary_mask()) {
    seg_binary_mask_ = new ::watrix::proto::CameraImage(*from.seg_binary_mask_);
  } else {
    seg_binary_mask_ = NULL;
  }
  if (from.has_detection_boxs()) {
    detection_boxs_ = new ::watrix::proto::DetectionBoxs(*from.detection_boxs_);
  } else {
    detection_boxs_ = NULL;
  }
  if (from.has_max_safe_distance()) {
    max_safe_distance_ = new ::watrix::proto::MaxSafeDistance(*from.max_safe_distance_);
  } else {
    max_safe_distance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watrix.proto.SendResult)
}

void SendResult::SharedCtor() {
  ::memset(&source_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_safe_distance_) -
      reinterpret_cast<char*>(&source_image_)) + sizeof(max_safe_distance_));
}

SendResult::~SendResult() {
  // @@protoc_insertion_point(destructor:watrix.proto.SendResult)
  SharedDtor();
}

void SendResult::SharedDtor() {
  if (this != internal_default_instance()) delete source_image_;
  if (this != internal_default_instance()) delete seg_binary_mask_;
  if (this != internal_default_instance()) delete detection_boxs_;
  if (this != internal_default_instance()) delete max_safe_distance_;
}

void SendResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SendResult::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendResult& SendResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_SendResult.base);
  return *internal_default_instance();
}


void SendResult::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.SendResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_image_ != NULL);
      source_image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(seg_binary_mask_ != NULL);
      seg_binary_mask_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_boxs_ != NULL);
      detection_boxs_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(max_safe_distance_ != NULL);
      max_safe_distance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.SendResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .watrix.proto.CameraImage source_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.CameraImage seg_binary_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_seg_binary_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.DetectionBoxs detection_boxs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_boxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.MaxSafeDistance max_safe_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_safe_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.SendResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.SendResult)
  return false;
#undef DO_
}

void SendResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.SendResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImage source_image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_source_image(), output);
  }

  // optional .watrix.proto.CameraImage seg_binary_mask = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_seg_binary_mask(), output);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_detection_boxs(), output);
  }

  // optional .watrix.proto.MaxSafeDistance max_safe_distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_max_safe_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.SendResult)
}

::google::protobuf::uint8* SendResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.SendResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImage source_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_source_image(), deterministic, target);
  }

  // optional .watrix.proto.CameraImage seg_binary_mask = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_seg_binary_mask(), deterministic, target);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_detection_boxs(), deterministic, target);
  }

  // optional .watrix.proto.MaxSafeDistance max_safe_distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_max_safe_distance(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.SendResult)
  return target;
}

size_t SendResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.SendResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .watrix.proto.CameraImage source_image = 1;
    if (has_source_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_image_);
    }

    // optional .watrix.proto.CameraImage seg_binary_mask = 2;
    if (has_seg_binary_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *seg_binary_mask_);
    }

    // optional .watrix.proto.DetectionBoxs detection_boxs = 3;
    if (has_detection_boxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detection_boxs_);
    }

    // optional .watrix.proto.MaxSafeDistance max_safe_distance = 4;
    if (has_max_safe_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *max_safe_distance_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.SendResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SendResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.SendResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.SendResult)
    MergeFrom(*source);
  }
}

void SendResult::MergeFrom(const SendResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.SendResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_source_image()->::watrix::proto::CameraImage::MergeFrom(from.source_image());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_seg_binary_mask()->::watrix::proto::CameraImage::MergeFrom(from.seg_binary_mask());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_detection_boxs()->::watrix::proto::DetectionBoxs::MergeFrom(from.detection_boxs());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_max_safe_distance()->::watrix::proto::MaxSafeDistance::MergeFrom(from.max_safe_distance());
    }
  }
}

void SendResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.SendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendResult::CopyFrom(const SendResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.SendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendResult::IsInitialized() const {
  return true;
}

void SendResult::Swap(SendResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendResult::InternalSwap(SendResult* other) {
  using std::swap;
  swap(source_image_, other->source_image_);
  swap(seg_binary_mask_, other->seg_binary_mask_);
  swap(detection_boxs_, other->detection_boxs_);
  swap(max_safe_distance_, other->max_safe_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SendResult::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SyncPerceptionResult::InitAsDefaultInstance() {
  ::watrix::proto::_SyncPerceptionResult_default_instance_._instance.get_mutable()->source_images_ = const_cast< ::watrix::proto::CameraImages*>(
      ::watrix::proto::CameraImages::internal_default_instance());
  ::watrix::proto::_SyncPerceptionResult_default_instance_._instance.get_mutable()->lane_binary_masks_ = const_cast< ::watrix::proto::CameraImages*>(
      ::watrix::proto::CameraImages::internal_default_instance());
  ::watrix::proto::_SyncPerceptionResult_default_instance_._instance.get_mutable()->detection_boxs1_ = const_cast< ::watrix::proto::DetectionBoxs*>(
      ::watrix::proto::DetectionBoxs::internal_default_instance());
  ::watrix::proto::_SyncPerceptionResult_default_instance_._instance.get_mutable()->detection_boxs2_ = const_cast< ::watrix::proto::DetectionBoxs*>(
      ::watrix::proto::DetectionBoxs::internal_default_instance());
  ::watrix::proto::_SyncPerceptionResult_default_instance_._instance.get_mutable()->max_safe_distance_ = const_cast< ::watrix::proto::MaxSafeDistance*>(
      ::watrix::proto::MaxSafeDistance::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncPerceptionResult::kSourceImagesFieldNumber;
const int SyncPerceptionResult::kLaneBinaryMasksFieldNumber;
const int SyncPerceptionResult::kDetectionBoxs1FieldNumber;
const int SyncPerceptionResult::kDetectionBoxs2FieldNumber;
const int SyncPerceptionResult::kMaxSafeDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncPerceptionResult::SyncPerceptionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fimage_2eproto::scc_info_SyncPerceptionResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:watrix.proto.SyncPerceptionResult)
}
SyncPerceptionResult::SyncPerceptionResult(const SyncPerceptionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_images()) {
    source_images_ = new ::watrix::proto::CameraImages(*from.source_images_);
  } else {
    source_images_ = NULL;
  }
  if (from.has_lane_binary_masks()) {
    lane_binary_masks_ = new ::watrix::proto::CameraImages(*from.lane_binary_masks_);
  } else {
    lane_binary_masks_ = NULL;
  }
  if (from.has_detection_boxs1()) {
    detection_boxs1_ = new ::watrix::proto::DetectionBoxs(*from.detection_boxs1_);
  } else {
    detection_boxs1_ = NULL;
  }
  if (from.has_detection_boxs2()) {
    detection_boxs2_ = new ::watrix::proto::DetectionBoxs(*from.detection_boxs2_);
  } else {
    detection_boxs2_ = NULL;
  }
  if (from.has_max_safe_distance()) {
    max_safe_distance_ = new ::watrix::proto::MaxSafeDistance(*from.max_safe_distance_);
  } else {
    max_safe_distance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watrix.proto.SyncPerceptionResult)
}

void SyncPerceptionResult::SharedCtor() {
  ::memset(&source_images_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_safe_distance_) -
      reinterpret_cast<char*>(&source_images_)) + sizeof(max_safe_distance_));
}

SyncPerceptionResult::~SyncPerceptionResult() {
  // @@protoc_insertion_point(destructor:watrix.proto.SyncPerceptionResult)
  SharedDtor();
}

void SyncPerceptionResult::SharedDtor() {
  if (this != internal_default_instance()) delete source_images_;
  if (this != internal_default_instance()) delete lane_binary_masks_;
  if (this != internal_default_instance()) delete detection_boxs1_;
  if (this != internal_default_instance()) delete detection_boxs2_;
  if (this != internal_default_instance()) delete max_safe_distance_;
}

void SyncPerceptionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SyncPerceptionResult::descriptor() {
  ::protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncPerceptionResult& SyncPerceptionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fimage_2eproto::scc_info_SyncPerceptionResult.base);
  return *internal_default_instance();
}


void SyncPerceptionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:watrix.proto.SyncPerceptionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_images_ != NULL);
      source_images_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_binary_masks_ != NULL);
      lane_binary_masks_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_boxs1_ != NULL);
      detection_boxs1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(detection_boxs2_ != NULL);
      detection_boxs2_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(max_safe_distance_ != NULL);
      max_safe_distance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncPerceptionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watrix.proto.SyncPerceptionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .watrix.proto.CameraImages source_images = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.CameraImages lane_binary_masks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_binary_masks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.DetectionBoxs detection_boxs1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_boxs1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.DetectionBoxs detection_boxs2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_boxs2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .watrix.proto.MaxSafeDistance max_safe_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_safe_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watrix.proto.SyncPerceptionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watrix.proto.SyncPerceptionResult)
  return false;
#undef DO_
}

void SyncPerceptionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watrix.proto.SyncPerceptionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImages source_images = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_source_images(), output);
  }

  // optional .watrix.proto.CameraImages lane_binary_masks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lane_binary_masks(), output);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_detection_boxs1(), output);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_detection_boxs2(), output);
  }

  // optional .watrix.proto.MaxSafeDistance max_safe_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_max_safe_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:watrix.proto.SyncPerceptionResult)
}

::google::protobuf::uint8* SyncPerceptionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watrix.proto.SyncPerceptionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .watrix.proto.CameraImages source_images = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_source_images(), deterministic, target);
  }

  // optional .watrix.proto.CameraImages lane_binary_masks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lane_binary_masks(), deterministic, target);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_detection_boxs1(), deterministic, target);
  }

  // optional .watrix.proto.DetectionBoxs detection_boxs2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_detection_boxs2(), deterministic, target);
  }

  // optional .watrix.proto.MaxSafeDistance max_safe_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_max_safe_distance(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watrix.proto.SyncPerceptionResult)
  return target;
}

size_t SyncPerceptionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watrix.proto.SyncPerceptionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .watrix.proto.CameraImages source_images = 1;
    if (has_source_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_images_);
    }

    // optional .watrix.proto.CameraImages lane_binary_masks = 2;
    if (has_lane_binary_masks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_binary_masks_);
    }

    // optional .watrix.proto.DetectionBoxs detection_boxs1 = 3;
    if (has_detection_boxs1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detection_boxs1_);
    }

    // optional .watrix.proto.DetectionBoxs detection_boxs2 = 4;
    if (has_detection_boxs2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detection_boxs2_);
    }

    // optional .watrix.proto.MaxSafeDistance max_safe_distance = 5;
    if (has_max_safe_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *max_safe_distance_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPerceptionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watrix.proto.SyncPerceptionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPerceptionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncPerceptionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watrix.proto.SyncPerceptionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watrix.proto.SyncPerceptionResult)
    MergeFrom(*source);
  }
}

void SyncPerceptionResult::MergeFrom(const SyncPerceptionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watrix.proto.SyncPerceptionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_source_images()->::watrix::proto::CameraImages::MergeFrom(from.source_images());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_binary_masks()->::watrix::proto::CameraImages::MergeFrom(from.lane_binary_masks());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_detection_boxs1()->::watrix::proto::DetectionBoxs::MergeFrom(from.detection_boxs1());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_detection_boxs2()->::watrix::proto::DetectionBoxs::MergeFrom(from.detection_boxs2());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_max_safe_distance()->::watrix::proto::MaxSafeDistance::MergeFrom(from.max_safe_distance());
    }
  }
}

void SyncPerceptionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watrix.proto.SyncPerceptionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPerceptionResult::CopyFrom(const SyncPerceptionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watrix.proto.SyncPerceptionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPerceptionResult::IsInitialized() const {
  return true;
}

void SyncPerceptionResult::Swap(SyncPerceptionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncPerceptionResult::InternalSwap(SyncPerceptionResult* other) {
  using std::swap;
  swap(source_images_, other->source_images_);
  swap(lane_binary_masks_, other->lane_binary_masks_);
  swap(detection_boxs1_, other->detection_boxs1_);
  swap(detection_boxs2_, other->detection_boxs2_);
  swap(max_safe_distance_, other->max_safe_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SyncPerceptionResult::GetMetadata() const {
  protobuf_camera_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace watrix
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::CameraImage* Arena::CreateMaybeMessage< ::watrix::proto::CameraImage >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::CameraImage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::Point* Arena::CreateMaybeMessage< ::watrix::proto::Point >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::DetectionBox* Arena::CreateMaybeMessage< ::watrix::proto::DetectionBox >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::DetectionBox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::DetectionBoxs* Arena::CreateMaybeMessage< ::watrix::proto::DetectionBoxs >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::DetectionBoxs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::ObjectsDistance* Arena::CreateMaybeMessage< ::watrix::proto::ObjectsDistance >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::ObjectsDistance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::CameraImages* Arena::CreateMaybeMessage< ::watrix::proto::CameraImages >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::CameraImages >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::YoloDetectionResult* Arena::CreateMaybeMessage< ::watrix::proto::YoloDetectionResult >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::YoloDetectionResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::LidarImageResult* Arena::CreateMaybeMessage< ::watrix::proto::LidarImageResult >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::LidarImageResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::SyncCameraResult* Arena::CreateMaybeMessage< ::watrix::proto::SyncCameraResult >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::SyncCameraResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::MaxSafeDistance* Arena::CreateMaybeMessage< ::watrix::proto::MaxSafeDistance >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::MaxSafeDistance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::SendResult* Arena::CreateMaybeMessage< ::watrix::proto::SendResult >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::SendResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::watrix::proto::SyncPerceptionResult* Arena::CreateMaybeMessage< ::watrix::proto::SyncPerceptionResult >(Arena* arena) {
  return Arena::CreateInternal< ::watrix::proto::SyncPerceptionResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
