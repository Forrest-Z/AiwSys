syntax = "proto2";

package watrix.proto;

message CameraImage {
  enum ImageType {
    ORIGIN = 0;
    MASK_RESULT = 1;
    YOLO_DETECT_RESULT = 2;
  }
  
  optional uint32 camera_id = 1; 
  optional uint32 height    = 2;  
  optional uint32 width     = 3;  
  optional uint32 channel   = 4;  
  optional ImageType type   = 5;
  optional bytes  data      = 6;
  optional uint64 timestamp_msec = 7;  
  optional uint64 frame_count = 8;
  optional int32 interval_time = 9;
}

message Point {
  optional double x = 1;  // in meters.
  optional double y = 2;  // in meters.
  optional double z = 3;  // in meters.
}

message DetectionBox {
  optional uint32 xmin = 1;
  optional uint32 ymin = 2;
  optional uint32 xmax = 3;
  optional uint32 ymax = 4;
  optional float confidence = 5;
  optional uint32 class_index = 6;
  optional bytes class_name = 7;
  optional Point distance = 8;  // for image distance
  optional int32 invasion_status = 9;
  optional float invasion_distance = 10;
}

// for 1 image, we get 1 DetectionBoxs (N DetectionBox)
message DetectionBoxs {
  repeated DetectionBox boxs = 1; 
}

message ObjectsDistance {
  optional int32 object_distance = 1; 
}

message CameraImages {
  repeated CameraImage images = 1; 
}

message YoloDetectionResult {
  optional CameraImage source_image = 1;
  optional DetectionBoxs detection_boxs = 2;
}

message LidarImageResult {
  optional CameraImage lidar_image = 1; 
  optional uint64 timestamp_msec = 2;  
}

message SyncCameraResult {
  optional CameraImages sync_images = 1; 
  optional uint64 timestamp_msec = 2;  
}

message MaxSafeDistance {
  optional int32 image_distance = 1;
  repeated ObjectsDistance lidar_distance = 2;
}

message SendResult {
  optional CameraImage source_image = 1; 
  optional CameraImage seg_binary_mask = 2;
  optional DetectionBoxs detection_boxs = 3;
  optional MaxSafeDistance max_safe_distance = 4; 
}

message SyncPerceptionResult {
  optional CameraImages source_images = 1; 
  optional CameraImages lane_binary_masks = 2; 
  optional DetectionBoxs detection_boxs1 = 3; 
  optional DetectionBoxs detection_boxs2 = 4;
  optional MaxSafeDistance max_safe_distance = 5; 
}
